[
{
	"uri": "/docs-sat/en-26/usage/",
	"title": "SAT Usage",
	"tags": [],
	"description": "",
	"content": "SAT Usage SAT Bootprep SAT and IUF Change the BOS Version Configure Multi-tenancy "
},
{
	"uri": "/docs-sat/en-26/about_sat/",
	"title": "About SAT",
	"tags": [],
	"description": "",
	"content": "About SAT View SAT Documentation Introduction to SAT SAT Command Authentication SAT in CSM SAT Dependencies "
},
{
	"uri": "/docs-sat/en-26/",
	"title": "HPE Cray EX System Admin Toolkit (SAT) Guide",
	"tags": [],
	"description": "",
	"content": "HPE Cray EX System Admin Toolkit (SAT) Guide About SAT View SAT Documentation Introduction to SAT SAT Command Authentication SAT in CSM SAT Dependencies SAT Installation Install and Upgrade Framework IUF Stage Details for SAT Post-Installation Procedures SAT Upgrade Install and Upgrade Framework IUF Stage Details for SAT Post-Upgrade Procedures SAT Uninstall and Downgrade Uninstall: Remove a Version of SAT Downgrade: Switch Between SAT Versions SAT on an External System Limitations Install and Configure SAT Authenticate SAT Commands Generate SAT S3 Credentials SAT Usage SAT Bootprep SAT and IUF Change the BOS Version Configure Multi-tenancy SAT Release Notes Changes in SAT Version 2.x SAT Changes in Shasta Version 1.x "
},
{
	"uri": "/docs-sat/en-26/install/",
	"title": "SAT Installation",
	"tags": [],
	"description": "",
	"content": "SAT Installation Install and Upgrade Framework The Install and Upgrade Framework (IUF) provides commands which install, upgrade, and deploy products on systems managed by CSM. IUF capabilities are described in detail in the IUF section of the Cray System Management Documentation. The initial install and upgrade workflows described in the HPE Cray EX System Software Stack Installation and Upgrade Guide for CSM (S-8052) detail when and how to use IUF with a new release of SAT or any other HPE Cray EX product.\nThis document does not replicate install, upgrade, or deployment procedures detailed in the Cray System Management Documentation. This document provides details regarding software and configuration content specific to SAT which is needed when installing, upgrading, or deploying a SAT release. The Cray System Management Documentation will indicate when sections of this document should be referred to for detailed information.\nIUF will perform the following tasks for a release of SAT.\nIUF deliver-product stage: Uploads SAT configuration content to VCS Uploads SAT information to the CSM product catalog Uploads SAT content to Nexus repositories IUF update-vcs-config stage: Updates the VCS integration branch with new SAT configuration content if a working branch is specified IUF update-cfs-config stage: Creates a new CFS configuration for management nodes with new SAT configuration content IUF prepare-images stage: Creates updated management NCN and managed node images with new SAT content IUF management-nodes-rollout stage: Boots management NCNs with an image containing new SAT content IUF uses a variety of CSM and SAT tools when performing these tasks. The IUF section of the Cray System Management Documentation describes how to use these tools directly if it is desirable to use them instead of IUF.\nIUF Stage Details for SAT This section describes SAT details that an administrator must be aware of before running IUF stages. Entries are prefixed with Information if no administrative action is required or Action if an administrator needs to perform tasks outside of IUF.\nupdate-vcs-config Information: This stage is only run if a VCS working branch is specified for SAT. By default, SAT does not create or specify a VCS working branch.\nupdate-cfs-config Information: This stage only applies to the management configuration and not to the managed configuration.\nprepare-images Information: This stage only applies to management images and not to managed images.\nPost-Installation Procedures After installing SAT with IUF, complete the following SAT configuration procedures before using SAT:\nAuthenticate SAT Commands Generate SAT S3 Credentials (Optional) Configure Multi-tenancy Set System Revision Information Notes on the Procedures Ellipses (...) in shell output indicate omitted lines. In the examples below, replace x.y.z with the version of the SAT product stream being installed. \u0026lsquo;manager\u0026rsquo; and \u0026lsquo;master\u0026rsquo; are used interchangeably in the steps below. Authenticate SAT Commands To run SAT commands on the manager NCNs, first set up authentication to the API gateway. For more information on authentication types and authentication credentials, see SAT Command Authentication.\nThe admin account used to authenticate with sat auth must be enabled in Keycloak and must have its assigned role set to admin. For more information on Keycloak accounts and changing Role Mappings, refer to both Configure Keycloak Account and Create Internal User Accounts in the Keycloak Shasta Realm in the Cray System Management Documentation.\nPrerequisites The sat CLI has been installed following the IUF section of the Cray System Management Documentation. Procedure The following is the procedure to globally configure the username used by SAT and authenticate to the API gateway.\n(ncn-m001#) Generate a default SAT configuration file if one does not exist.\nsat init Example output:\nConfiguration file \u0026#34;/root/.config/sat/sat.toml\u0026#34; generated. Note: If the configuration file already exists, it will print out the following error.\nERROR: Configuration file \u0026#34;/root/.config/sat/sat.toml\u0026#34; already exists. Not generating configuration file. Edit ~/.config/sat/sat.toml and set the username option in the api_gateway section of the configuration file.\nusername = \u0026#34;crayadmin\u0026#34; (ncn-m001#) Run sat auth. Enter the password when prompted.\nsat auth Example output:\nPassword for crayadmin: Succeeded! (ncn-m001#) Other sat commands are now authenticated to make requests to the API gateway.\nsat status Generate SAT S3 Credentials Generate S3 credentials and write them to a local file so the SAT user can access S3 storage. In order to use the SAT S3 bucket, the System Administrator must generate the S3 access key and secret keys and write them to a local file. This must be done on every Kubernetes control plane node where SAT commands are run.\nSAT uses S3 storage for several purposes, most importantly to store the site-specific information set with sat setrev (see Set System Revision Information).\nPrerequisites The SAT CLI has been installed following the IUF section of the Cray System Management Documentation. The SAT configuration file has been created (See Authenticate SAT Commands). CSM has been installed and verified. Procedure (ncn-m001#) Ensure the files are readable only by root.\ntouch /root/.config/sat/s3_access_key \\ /root/.config/sat/s3_secret_key chmod 600 /root/.config/sat/s3_access_key \\ /root/.config/sat/s3_secret_key (ncn-m001#) Write the credentials to local files using kubectl.\nkubectl get secret sat-s3-credentials -o json -o \\ jsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 -d \u0026gt; \\ /root/.config/sat/s3_access_key kubectl get secret sat-s3-credentials -o json -o \\ jsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 -d \u0026gt; \\ /root/.config/sat/s3_secret_key Verify the S3 endpoint specified in the SAT configuration file is correct.\n(ncn-m001#) Get the SAT configuration file\u0026rsquo;s endpoint value.\nNote: If the command\u0026rsquo;s output is commented out, indicated by an initial # character, the SAT configuration will take the default value â€“ \u0026quot;https://rgw-vip.nmn\u0026quot;.\ngrep endpoint ~/.config/sat/sat.toml Example output:\n# endpoint = \u0026#34;https://rgw-vip.nmn\u0026#34; (ncn-m001#) Get the sat-s3-credentials secret\u0026rsquo;s endpoint value.\nkubectl get secret sat-s3-credentials -o json -o \\ jsonpath=\u0026#39;{.data.s3_endpoint}\u0026#39; | base64 -d | xargs Example output:\nhttps://rgw-vip.nmn Compare the two endpoint values.\nIf the values differ, change the SAT configuration file\u0026rsquo;s endpoint value to match the secret\u0026rsquo;s.\n(ncn-m001#) Copy SAT configurations to each manager node on the system.\nfor i in ncn-m002 ncn-m003; do echo $i; ssh ${i} \\ mkdir -p /root/.config/sat; \\ scp -pr /root/.config/sat ${i}:/root/.config; done Note: Depending on how many manager nodes are on the system, the list of manager nodes may be different. This example assumes three manager nodes, where the configuration files must be copied from ncn-m001 to ncn-m002 and ncn-m003. Therefore, the list of hosts above is ncn-m002 and ncn-m003.\n(Optional) Configure Multi-tenancy If installing SAT on a multi-tenant system, the tenant name can be configured at this point. For more information, see Configure multi-tenancy.\nSet System Revision Information HPE service representatives use system revision information data to identify systems in support cases.\nPrerequisites SAT authentication has been set up. See Authenticate SAT Commands. S3 credentials have been generated. See Generate SAT S3 Credentials. Procedure (ncn-m001#) Set System Revision Information.\nRun sat setrev and follow the prompts to set the following site-specific values:\nSerial number System name System type System description Product number Company name Site name Country code System install date Tip: For \u0026ldquo;System type\u0026rdquo;, a system with any liquid-cooled components should be considered a liquid-cooled system. In other words, \u0026ldquo;System type\u0026rdquo; is EX-1C.\nsat setrev Example output:\n-------------------------------------------------------------------------------- Setting: Serial number Purpose: System identification. This will affect how snapshots are identified in the HPE backend services. Description: This is the top-level serial number which uniquely identifies the system. It can be requested from an HPE representative. Valid values: Alpha-numeric string, 4 - 20 characters. Type: \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; Default: None Current value: None -------------------------------------------------------------------------------- Please do one of the following to set the value of the above setting: - Input a new value - Press CTRL-C to exit ... Verify System Revision Information.\n(ncn-m001#) Run sat showrev and verify the output shown in the \u0026ldquo;System Revision Information table.\u0026rdquo;\nsat showrev Example table output:\n################################################################################ System Revision Information ################################################################################ +---------------------+---------------+ | component | data | +---------------------+---------------+ | Company name | HPE | | Country code | US | | Interconnect | Sling | | Product number | R4K98A | | Serial number | 12345 | | Site name | HPE | | Slurm version | slurm 20.02.5 | | System description | Test System | | System install date | 2021-01-29 | | System name | eniac | | System type | EX-1C | +---------------------+---------------+ ################################################################################ Product Revision Information ################################################################################ +--------------+-----------------+------------------------------+------------------------------+ | product_name | product_version | images | image_recipes | +--------------+-----------------+------------------------------+------------------------------+ | csm | 0.8.14 | cray-shasta-csm-sles15sp1... | cray-shasta-csm-sles15sp1... | | sat | 2.0.1 | - | - | | sdu | 1.0.8 | - | - | | slingshot | 0.8.0 | - | - | | sma | 1.4.12 | - | - | +--------------+-----------------+------------------------------+------------------------------+ ################################################################################ Local Host Operating System ################################################################################ +-----------+----------------------+ | component | version | +-----------+----------------------+ | Kernel | 5.3.18-24.15-default | | SLES | SLES 15-SP2 | +-----------+----------------------+ "
},
{
	"uri": "/docs-sat/en-26/release_notes/",
	"title": "SAT Release Notes",
	"tags": [],
	"description": "",
	"content": "SAT Release Notes Changes in SAT Version 2.x Changes in SAT 2.6 Changes in SAT 2.5 Changes in SAT 2.4 Changes in SAT 2.3 Changes in SAT 2.2 SAT Changes in Shasta Version 1.x SAT Changes in Shasta v1.5 SAT Changes in Shasta v1.4.1 SAT Changes in Shasta v1.4 SAT Changes in Shasta v1.3.2 SAT Changes in Shasta v1.3 "
},
{
	"uri": "/docs-sat/en-26/usage/change_bos_version/",
	"title": "Change the BOS Version",
	"tags": [],
	"description": "",
	"content": "Change the BOS Version By default, SAT uses Boot Orchestration Service (BOS) version two (v2). Select the BOS version to use for individual commands with the --bos-version option. For more information on this option, refer to the man page for a specific command.\nAnother way to change the BOS version is by configuring it under the api_version setting in the bos section of the SAT configuration file. If the system is using an existing SAT configuration file from an older version of SAT, the bos section might not exist. In that case, add the bos section with the BOS version desired in the api_version setting.\nFind the SAT configuration file at ~/.config/sat/sat.toml, and look for a section like this:\n[bos] api_version = \u0026#34;v2\u0026#34; In this example, SAT is using BOS version \u0026quot;v2\u0026quot;.\nChange the line specifying the api_version to the BOS version desired (for example, \u0026quot;v1\u0026quot;).\n[bos] api_version = \u0026#34;v1\u0026#34; If applicable, uncomment the api_version line.\nIf the system is using an existing SAT configuration file from a recent version of SAT, the api_version line might be commented out like this:\n[bos] # api_version = \u0026#34;v2\u0026#34; If the line is commented out, SAT will still use the default BOS version. To ensure a different BOS version is used, uncomment the api_version line by removing # at the beginning of the line.\n"
},
{
	"uri": "/docs-sat/en-26/release_notes/sat_2.2_release_notes/",
	"title": "Changes in SAT 2.2",
	"tags": [],
	"description": "",
	"content": "Changes in SAT 2.2 SAT 2.2.16 was released on February 25th, 2022.\nThis version of the SAT product included:\nVersion 3.14.0 of the sat python package and CLI Version 1.6.4 of the sat-podman wrapper script Version 1.0.4 of the sat-cfs-install container image and Helm chart It also added the following new components:\nVersion 1.4.3 of the sat-install-utility container image Version 2.0.2 of the cfs-config-util container image The following sections detail the changes in this release.\nKnown Issues in SAT 2.2 sat Command Unavailable in sat bash Shell After launching a shell within the SAT container with sat bash, the sat command will not be found.\n((CONTAINER_ID) sat-container#) Here is an example output after running sat status:\nbash: sat: command not found ((CONTAINER_ID) sat-container#) This can be resolved temporarily in one of two ways. /sat/venv/bin/ may be prepended to the $PATH environment variable:\nexport PATH=/sat/venv/bin:$PATH sat status ((CONTAINER_ID) sat-container#) Another option is to source the file /sat/venv/bin/activate:\nsource /sat/venv/bin/activate sat status Tab Completion Unavailable in sat bash Shell After launching a shell within the SAT container with sat bash, tab completion for sat commands does not work.\n((CONTAINER_ID) sat-container#) This can be resolved temporarily by sourcing the file /etc/bash_completion.d/sat-completion.bash:\nsource /etc/bash_completion.d/sat-completion.bash OCI Runtime Permission Error when Running sat in Root Directory sat commands will not work if the current directory is /.\n(ncn-m001#) Here is an example output after running sat --help:\nError: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: open /dev/console: operation not permitted: OCI runtime permission denied error To resolve, run sat in another directory.\nDuplicate Mount Error when Running sat in Configuration Directory sat commands will not work if the current directory is ~/.config/sat.\n(ncn-m001#) Here is an example output after running sat --help:\nError: /root/.config/sat: duplicate mount destination To resolve, run sat in another directory.\nNew sat Commands sat bootprep automates the creation of CFS configurations, the build and customization of IMS images, and the creation of BOS session templates. For more information, see SAT Bootprep. sat slscheck performs a check for consistency between the System Layout Service (SLS) and the Hardware State Manager (HSM). sat bmccreds provides a simple interface for interacting with the System Configuration Service (SCSD) to set BMC Redfish credentials. sat hwhist displays hardware component history by XName (location) or by its Field-Replaceable Unit ID (FRUID). This command queries the Hardware State Manager (HSM) API to obtain this information. Since the sat hwhist command supports querying for the history of a component by its FRUID, the FRUID of components has been added to the output of sat hwinv. Additional Install Automation The following automation has been added to the install script, install.sh:\nWait for the completion of the sat-config-import Kubernetes job, which is started when the sat-cfs-install Helm chart is deployed. Automate the modification of the CFS configuration, which applies to master management NCNs (for example, ncn-personalization). Changes to Product Catalog Data Schema The SAT product uploads additional information to the cray-product-catalog Kubernetes ConfigMap detailing the components it provides, including container (Docker) images, Helm charts, RPMs, and package repositories.\nThis information is used to support uninstall and downgrade of SAT product versions moving forward.\nSupport for Uninstall and Downgrade of SAT Versions Beginning with the 2.2 release, SAT now provides partial support for the uninstall and downgrade of the SAT product stream.\nFor more information, see Uninstall: Remove a Version of SAT and Downgrade: Switch Between SAT Versions.\nImprovements to sat status A Subrole column has been added to the output of sat status. This allows easy differentiation between master, worker, and storage nodes in the management role, for example.\nHostname information from SLS has been added to sat status output.\nAdded Support for JSON Output Support for JSON-formatted output has been added to commands which currently support the --format option, such as hwinv, status, and showrev.\nUsability Improvements Many usability improvements have been made to multiple sat commands, mostly related to filtering command output. The following are some highlights:\nAdded --fields option to display only specific fields for subcommands which display tabular reports. Added ability to filter on exact matches of a field name. Improved handling of multiple matches of a field name in --filter queries so that the first match is used, similar to --sort-by. Added support for --filter, --fields, and --reverse for summaries displayed by sat hwinv. Added borders to summary tables generated by sat hwinv. Improved documentation in the man pages. Default Log Level Changed The default log level for stderr has been changed from \u0026ldquo;WARNING\u0026rdquo; to \u0026ldquo;INFO\u0026rdquo;. For more information, see Update SAT Logging.\nMore Granular Log Level Configuration Options With the command-line options --loglevel-stderr and --loglevel-file, the log level can now be configured separately for stderr and the log file.\nThe existing --loglevel option is now an alias for the --loglevel-stderr option.\nPodman Wrapper Script Improvements The Podman wrapper script is the script installed at /usr/bin/sat on the master management NCNs by the cray-sat-podman RPM that runs the cray-sat container in podman. The following subsections detail improvements that were made to the wrapper script in this release.\nMounting of $HOME and Current Directories in cray-sat Container The Podman wrapper script that launches the cray-sat container with podman has been modified to mount the user\u0026rsquo;s current directory and home directory into the cray-sat container to provide access to local files in the container.\nPodman Wrapper Script Documentation Improvements The man page for the Podman wrapper script, which is accessed by typing man sat on a master management NCN, has been improved to document the following:\nEnvironment variables that affect execution of the wrapper script Host files and directories mounted in the container Fixes to Podman Wrapper Script Output Redirection Fixed issues with redirecting stdout and stderr, and piping output to commands, such as awk, less, and more.\nConfigurable HTTP Timeout A new sat option has been added to configure the HTTP timeout length for requests to the API gateway. For more information, refer to sat-man sat.\nsat bootsys Improvements Many improvements and fixes have been made to sat bootsys. The following are some highlights:\nAdded the --excluded-ncns option, which can be used to omit NCNs from the platform-services and ncn-power stages in case they are inaccessible. Disruptive shutdown stages in sat bootsys shutdown now prompt the user to continue before proceeding. A new option, --disruptive, will bypass this. Improvements to Ceph service health checks and restart during the platform-services stage of sat bootsys boot. sat xname2nid Improvements sat xname2nid can now recursively expand slot, chassis, and cabinet XNames to a list of NIDs in those locations.\nA new --format option has been added to sat xname2nid. It sets the output format to either \u0026ldquo;range\u0026rdquo; (the default) or \u0026ldquo;NID\u0026rdquo;. The \u0026ldquo;range\u0026rdquo; format displays NIDs in a compressed range format suitable for use with a workload manager like Slurm.\nUsage of v2 HSM API The commands which interact with HSM (for example, sat status and sat hwinv) now use the v2 HSM API.\nsat diag Limited to HSN Switches sat diag will now only operate against HSN switches by default. These are the only controllers that support running diagnostics with HMJTD.\nsat showrev Enhancements A column has been added to the output of sat showrev that indicates whether a product version is \u0026ldquo;active\u0026rdquo;. The definition of \u0026ldquo;active\u0026rdquo; varies across products, and not all products may set an \u0026ldquo;active\u0026rdquo; version.\nFor SAT, the active version is the one with its hosted-type package repository in Nexus set as the member of the group-type package repository in Nexus, meaning that it will be used when installing the cray-sat-podman RPM.\ncray-sat Container Image Size Reduction The size of the cray-sat container image has been approximately cut in half by leveraging multi-stage builds. This also improved the repeatability of the unit tests by running them in the container.\nBug Fixes Minor bug fixes were made in cray-sat and in cray-sat-podman. For full change lists, refer to each repository\u0026rsquo;s CHANGELOG.md file.\n"
},
{
	"uri": "/docs-sat/en-26/about_sat/command_authentication/",
	"title": "SAT Command Authentication",
	"tags": [],
	"description": "",
	"content": "SAT Command Authentication Some SAT subcommands make requests to the HPE Cray EX services through the API gateway and thus require authentication to the API gateway in order to function. Other SAT subcommands use the Kubernetes API. Some sat commands require S3 to be configured. In order to use the SAT S3 bucket, the System Administrator must generate the S3 access key and secret keys and write them to a local file. This must be done on every Kubernetes control plane node where SAT commands are run.\nFor more information on authentication requests, see System Security and Authentication in the Cray System Management Documentation. The following is a table describing SAT commands and the types of authentication they require.\nSAT Subcommand Authentication/Credentials Required Man Page Description sat auth Responsible for authenticating to the API gateway and storing a token. sat-auth Authenticate to the API gateway and save the token. sat bmccreds Requires authentication to the API gateway. sat-bmccreds Set BMC passwords. sat bootprep Requires authentication to the API gateway. Requires Kubernetes configuration and authentication, which is done on ncn-m001 during the install. sat-bootprep Prepare to boot nodes with images and configurations. sat bootsys Requires authentication to the API gateway. Requires Kubernetes configuration and authentication, which is configured on ncn-m001 during the install. Some stages require passwordless SSH to be configured to all other NCNs. Requires S3 to be configured for some stages. sat-bootsys Boot or shutdown the system, including compute nodes, application nodes, and non-compute nodes (NCNs) running the management software. sat diag Requires authentication to the API gateway. sat-diag Launch diagnostics on the HSN switches and generate a report. sat firmware Requires authentication to the API gateway. sat-firmware Report firmware version. sat hwhist Requires authentication to the API gateway. sat-hwhist Report hardware component history. sat hwinv Requires authentication to the API gateway. sat-hwinv Give a listing of the hardware of the HPE Cray EX system. sat hwmatch Requires authentication to the API gateway. sat-hwmatch Report hardware mismatches. sat init None sat-init Create a default SAT configuration file. sat jobstat Requires authentication to the API gateway. sat-jobstat Check the status of jobs and applications. sat k8s Requires Kubernetes configuration and authentication, which is automatically configured on ncn-m001 during the install. sat-k8s Report on Kubernetes replica sets that have co-located (on the same node) replicas. sat linkhealth This command has been deprecated. sat nid2xname Requires authentication to the API gateway. sat-nid2xname Translate node IDs to node XNames. sat sensors Requires authentication to the API gateway. sat-sensors Report current sensor data. sat setrev Requires S3 to be configured for site information such as system name, serial number, install date, and site name. sat-setrev Set HPE Cray EX system revision information. sat showrev Requires API gateway authentication in order to query the Interconnect from HSM. Requires S3 to be configured for site information such as system name, serial number, install date, and site name. sat-showrev Print revision information for the HPE Cray EX system. sat slscheck Requires authentication to the API gateway. sat-slscheck Perform a cross-check between SLS and HSM. sat status Requires authentication to the API gateway. sat-status Report node status across the HPE Cray EX system. sat swap Requires authentication to the API gateway. sat-swap Prepare HSN switch or cable for replacement and bring HSN switch or cable into service. sat xname2nid Requires authentication to the API gateway. sat-xname2nid Translate node and node BMC XNames to node IDs. sat switch This command has been deprecated. It has been replaced by sat swap. In order to authenticate to the API gateway, run the sat auth command. This command will prompt for a password on the command line. The username value is obtained from the following locations, in order of higher precedence to lower precedence:\nThe --username global command-line option. The username option in the api_gateway section of the configuration file at ~/.config/sat/sat.toml. The name of currently logged in user running the sat command. If credentials are entered correctly when prompted by sat auth, a token file will be obtained and saved to ~/.config/sat/tokens. Subsequent sat commands will determine the username the same way as sat auth described above and will use the token for that username if it has been obtained and saved by sat auth.\n"
},
{
	"uri": "/docs-sat/en-26/usage/multi-tenancy/",
	"title": "Configure Multi-tenancy",
	"tags": [],
	"description": "",
	"content": "Configure Multi-tenancy SAT supports supplying tenant information to CSM services in order to allow tenant admins to use SAT within their tenant. By default, the tenant name is not set, and SAT will not send any tenant information with its requests to CSM services. Configure the tenant name either in the SAT configuration file or on the command line.\nConfigure the Tenant Name in the SAT Configuration File Set the tenant name in the SAT configuration file using the api_gateway.tenant_name option.\nHere is an example:\n[api_gateway] tenant_name = \u0026#34;my_tenant\u0026#34; Configure the Tenant Name on the Command Line Set the tenant name for each sat invocation using the --tenant-name option. The --tenant-name option must be specified before the subcommand name.\n(ncn-m001#) Here is an example:\nsat --tenant-name=my_tenant status "
},
{
	"uri": "/docs-sat/en-26/release_notes/sat_2.3_release_notes/",
	"title": "Changes in SAT 2.3",
	"tags": [],
	"description": "",
	"content": "Changes in SAT 2.3 The 2.3.4 version of the SAT product includes:\nVersion 3.15.4 of the sat python package and CLI Version 1.6.11 of the sat-podman wrapper script Version 1.2.0 of the sat-cfs-install container image Version 2.0.0 of the sat-cfs-install Helm chart Version 1.5.0 of the sat-install-utility container image Version 2.0.3 of the cfs-config-util container image New sat Commands None.\nCurrent Working Directory in SAT Container When running sat commands, the current working directory is now mounted in the container as /sat/share, and the current working directory within the container is also /sat/share.\nFiles in the current working directory must be specified using relative paths to that directory, because the current working directory is always mounted on /sat/share. Absolute paths should be avoided, and paths that are outside of $HOME or $PWD are never accessible to the container environment.\nThe home directory is still mounted on the same path inside the container as it is on the host.\nChanges to sat bootsys The following options were added to sat bootsys.\n--bos-limit --recursive The --bos-limit option passes a given limit string to a BOS session. The --recursive option specifies a slot or other higher-level component in the limit string.\nChanges to sat bootprep The --delete-ims-jobs option was added to sat bootprep run. It deletes IMS jobs after sat bootprep is run. Jobs are no longer deleted by default.\nChanges to sat status sat status now includes information about nodes\u0026rsquo; CFS configuration statuses, such as desired configuration, configuration status, and error count.\nThe output of sat status now splits different component types into different report tables.\nThe following options were added to sat status.\n--hsm-fields, --sls-fields, --cfs-fields --bos-template The --hsm-fields, --sls-fields, --cfs-fields options limit the output columns according to specified CSM services.\nThe --bos-template option filters the status report according to the specified session template\u0026rsquo;s boot sets.\nCompatibility with CSM 1.2 The following components were modified to be compatible with CSM 1.2.\nsat-cfs-install container image and Helm chart sat-install-utility container image SAT product installer GPG Checking The sat-ncn Ansible role provided by sat-cfs-install was modified to enable GPG checks on packages while leaving GPG checks disabled on repository metadata.\nSecurity Updated urllib3 dependency to version 1.26.5 to mitigate CVE-2021-33503 and refreshed Python dependency versions.\nBug Fixes Minor bug fixes were made in each of the repositories. For full change lists, refer to each repositoryâ€™s CHANGELOG.md file.\nThe known issues listed under the SAT 2.2 release were fixed.\n"
},
{
	"uri": "/docs-sat/en-26/about_sat/dependencies/",
	"title": "SAT Dependencies",
	"tags": [],
	"description": "",
	"content": "SAT Dependencies Most sat subcommands depend on services or components from other products in the HPE Cray EX software stack. The following list shows these dependencies for each subcommand. Each service or component is listed under the product it belongs to.\nsat auth CSM Keycloak sat bmccreds CSM System Configuration Service (SCSD) sat bootprep CSM Boot Orchestration Service (BOS) Configuration Framework Service (CFS) Image Management Service (IMS) Version Control Service (VCS) Kubernetes S3 sat bootsys CSM Boot Orchestration Service (BOS) Cray Advanced Platform Monitoring and Control (CAPMC) Ceph Etcd Firmware Action Service (FAS) Hardware State Manager (HSM) Kubernetes S3 HPE Cray Supercomputing User Services Software (USS) Node Memory Dump (NMD) sat diag CSM Hardware State Manager (HSM) CSM-Diags Fox sat firmware CSM Firmware Action Service (FAS) sat hwhist CSM Hardware State Manager (HSM) sat hwinv CSM Hardware State Manager (HSM) sat hwmatch CSM Hardware State Manager (HSM) sat init None\nsat jobstat PBS HPE State Checker sat k8s CSM Kubernetes sat nid2xname CSM Hardware State Manager (HSM) sat sensors CSM Hardware State Manager (HSM) HM Collector SMA Telemetry API sat setrev CSM S3 sat showrev CSM Hardware State Manager (HSM) Kubernetes S3 sat slscheck CSM Hardware State Manager (HSM) System Layout Service (SLS) sat status CSM Boot Orchestration Service (BOS) Configuration Framework Service (CFS) Hardware State Manager (HSM) Image Management Service (IMS) System Layout Service (SLS) sat swap Slingshot Fabric Manager sat switch Deprecated: See sat swap\nsat xname2nid CSM Hardware State Manager (HSM) "
},
{
	"uri": "/docs-sat/en-26/usage/sat_and_iuf/",
	"title": "SAT and IUF",
	"tags": [],
	"description": "",
	"content": "SAT and IUF The Install and Upgrade Framework (IUF) provides commands which install, upgrade, and deploy products on systems managed by CSM with the help of sat bootprep. Outside of IUF, it is uncommon to use sat bootprep. For more information on IUF, see the IUF section of the Cray System Management Documentation. For more information on sat bootprep, see SAT Bootprep.\nVariable Substitutions Both IUF and sat bootprep allow variable substitutions into the default HPC CSM Software Recipe bootprep input files. The default variables of the HPC CSM Software Recipe are available in a product_vars.yaml file. To override the default variables, specify any site variables in a site_vars.yaml file. Variables are sourced from the command line, any variable files directly provided, and the HPC CSM Software Recipe files used, in that order.\nIUF Session Variables IUF also has special session variables internal to the iuf command that override any matching entries. Session variables are the set of product and version combinations being installed by the current IUF activity, and they are found inside IUF\u0026rsquo;s internal session_vars.yaml file. For more information on IUF and variable substitutions, see the IUF section of the Cray System Management Documentation.\nSAT Variable Limitations When using sat bootprep outside of IUF, substituting variables into the default bootprep input files might cause problems. Complex variables like \u0026quot;{{ working_branch }}\u0026quot; cannot be completely resolved outside of IUF and its internal session variables. Thus, the default product_vars.yaml file is unusable with only the sat bootprep command when variables like \u0026quot;{{ working_branch }}\u0026quot; are used. To work around this limitation when substituting complex variables, use the internal IUF session_vars.yaml file with sat bootprep and the default bootprep input files.\nFind the session_vars.yaml file from the most recent IUF activity on the system.\nThis process is documented in the upgrade prerequisites procedure of the Cray System Management Documentation. For more information, see steps 1-6 of Stage 0.3 - Option 2.\n(ncn-m001#) Use the session_vars.yaml file to substitute variables into the default bootprep input files.\nsat bootprep run --vars-file session_vars.yaml Limit SAT Bootprep Run into Stages The sat bootprep run command uses information from the bootprep input files to create CFS configurations, IMS images, and BOS session templates. To restrict this creation into separate stages, use the --limit option and list whether to create configurations, images, session_templates, or some combination of these. IUF uses the --limit option in this way to install, upgrade, and deploy products on a system in stages.\n(ncn-m001#) For example, to create only CFS configurations, run the following command used by the IUF update-cfs-config stage:\nsat bootprep run --limit configurations example-bootprep-input-file.yaml Example output:\nINFO: Validating given input file example-bootprep-input-file.yaml INFO: Input file successfully validated against schema INFO: Creating 3 CFS configurations ... INFO: Skipping creation of IMS images based on value of --limit option. INFO: Skipping creation of BOS session templates based on value of --limit option. (ncn-m001#) To create only IMS images and BOS session templates, run the following command used by the IUF prepare-images stage:\nsat bootprep run --limit images --limit session_templates example-bootprep-input-file.yaml Example output:\nINFO: Validating given input file example-bootprep-input-file.yaml INFO: Input file successfully validated against schema INFO: Skipping creation of CFS configurations based on value of --limit option. "
},
{
	"uri": "/docs-sat/en-26/release_notes/sat_2.4_release_notes/",
	"title": "Changes in SAT 2.4",
	"tags": [],
	"description": "",
	"content": "Changes in SAT 2.4 The 2.4.13 version of the SAT product includes:\nVersion 3.19.3 of the sat python package and CLI. Version 2.0.0-1 of the sat-podman wrapper script. Version 1.5.5 of the sat-install-utility container image. Version 3.3.1 of the cfs-config-util container image. Because of installation refactoring efforts, the following two components are no longer delivered with SAT:\nsat-cfs-install container image sat-cfs-install Helm chart Inclusion of SAT in CSM A version of the cray-sat container image is now included in CSM. For more information, see SAT in CSM.\nSAT Installation Improvements The SAT install.sh script no longer uses a sat-cfs-install Helm chart and container image to upload its Ansible content to the sat-config-management repository in VCS. Instead, it uses Podman to run the cf-gitea-import container directly. Some of the benefits of this change include the following:\nFewer container images that need to be managed by the SAT product Simplified SAT installation without Helm charts or Loftsman manifests Reduced SAT installation time Decoupling of cray-sat container image and cray-sat-podman package Decoupling of cray-sat Container Image and cray-sat-podman Package In older SAT releases, the sat wrapper script that was provided by the cray-sat-podman package installed on Kubernetes control plane nodes included a hard-coded version of the cray-sat container image. As a result, every new version of the cray-sat image required a corresponding new version of the cray-sat-podman package.\nIn this release, this tight coupling of the cray-sat-podman package and the cray-sat container image was removed. The sat wrapper script provided by the cray-sat-podman package now looks for the version of the cray-sat container image in the /opt/cray/etc/sat/version file. This file is populated with the correct version of the cray-sat container image by the SAT layer of the CFS configuration that is applied to management NCNs. If the version file does not exist, the wrapper script defaults to the version of the cray-sat container image delivered with the latest version of CSM installed on the system.\nImproved NCN Personalization Automation The steps for performing NCN personalization as part of the SAT installation were moved out of the install.sh script and into a new update-mgmt-ncn-cfs-config.sh script that is provided in the SAT release distribution. The new script provides additional flexibility in how it modifies the NCN personalization CFS configuration for SAT. It can modify an existing CFS configuration by name, a CFS configuration being built in a JSON file, or an existing CFS configuration that applies to certain components.\nNew sat bootprep Features The following new features were added to the sat bootprep command:\nVariable substitutions using Jinja2 templates in certain fields of the sat bootprep input file\nFor more information, see HPC CSM Software Recipe Variable Substitutions and Dynamic Variable Substitutions.\nSchema version validation in the sat bootprep input files\nFor more information, see Provide a Schema Version.\nAbility to look up images and recipes provided by products\nFor more information, see Define IMS Images.\nThe schema of the sat bootprep input files was also changed to support these new features:\nThe base recipe or image used by an image in the input file should now be specified under a base key instead of under an ims key. The old ims key is deprecated. To specify an image that depends on another image in the input file, the dependent image should specify the dependency under base.image_ref. Going forward, do not use the IMS name of the image on which it depends. The image used by a session template should now be specified under image.ims.name, image.ims.id, or image.image_ref. Specifying a string value directly under the image key is deprecated. For more information on defining IMS images and BOS session templates in the sat bootprep input file, see Define IMS Images and Define BOS Session Templates.\nAdded Blade Swap Support to sat swap The sat swap command was updated to support swapping compute and UAN blades with sat swap blade. This functionality is described in the following processes of the Cray System Management Documentation:\nAdding a Liquid-cooled blade to a System Using SAT Removing a Liquid-cooled blade from a System Using SAT Replace a Compute Blade Using SAT Swap a Compute Blade with a Different System Using SAT Support for BOS v2 A new v2 version of the Boot Orchestration Service (BOS) is available in CSM 1.3.0. SAT has added support for BOS v2. This impacts the following commands that interact with BOS:\nsat bootprep sat bootsys sat status By default, SAT uses BOS v1. To change the default to a different BOS version, see Change the BOS Version.\nAdded BOS Fields to sat status When using BOS v2, sat status outputs additional fields. These fields show the most recent BOS session, session template, booted image, and boot status for each node. An additional --bos-fields option was added to limit the output of sat status to these fields. The fields are not displayed when using BOS v1.\nOpen Source Repositories This is the first release of SAT built from open source code repositories. As a result, build infrastructure was changed to use an external Jenkins instance, and artifacts are now published to an external Artifactory instance. These changes should not impact the functionality of the SAT product in any way.\nSecurity CVE Mitigation The paramiko Python package version was updated from 2.9.2 to 2.10.1 to mitigate CVE-2022-24302. The oauthlib Python package version was updated from 3.2.0 to 3.2.1 to mitigate CVE-2022-36087. Restricted Permissions on SAT Configuration Files and Directories SAT stores information used to authenticate to the API gateway with Keycloak. Token files are stored in the ~/.config/sat/tokens/ directory. Those files have always had permissions appropriately set to restrict them to be readable only by the user.\nKeycloak usernames used to authenticate to the API gateway are stored in the SAT configuration file at /.config/sat/sat.toml. Keycloak usernames are also used in the file names of tokens stored in /.config/sat/tokens. As an additional security measure, SAT now restricts the permissions of the SAT configuration file to be readable and writable only by the user. It also restricts the tokens directory and the entire SAT configuration directory ~/.config/sat to be accessible only by the user. This prevents other users on the system from viewing Keycloak usernames used to authenticate to the API gateway.\nBug Fixes Fixed an issue where sat init did not print a message confirming a new configuration file was created. Fixed an issue where sat showrev exited with a traceback if the file /opt/cray/etc/site_info.yaml existed but was empty. This could occur if the user exited sat setrev with Ctrl-C. Fixed outdated information in the sat bootsys man page, and added a description of the command stages. "
},
{
	"uri": "/docs-sat/en-26/about_sat/introduction/",
	"title": "Introduction to SAT",
	"tags": [],
	"description": "",
	"content": "Introduction to SAT About System Admin Toolkit (SAT) The System Admin Toolkit (SAT) is designed to assist administrators with common tasks, such as troubleshooting and querying information about the HPE Cray EX System and its components, system boot and shutdown, and replacing hardware components.\nSAT offers a command line utility which uses subcommands. There are similarities between SAT commands and xt commands used on the Cray XC platform. For more information on SAT commands, see SAT Command Overview.\nIn CSM 1.3 and newer, the sat command is automatically available on all the Kubernetes control plane. For more information, see SAT in CSM. Older versions of CSM do not have the sat command automatically available, and SAT must be installed as a separate product.\nSAT Command Overview Describes the SAT Command Line Utility, lists the key commands found in the System Admin Toolkit man pages, and provides instruction on the SAT Container Environment.\nSAT Command Line Utility The primary component of the System Admin Toolkit (SAT) is a command-line utility run from Kubernetes control plane nodes (ncn-m nodes).\nIt is designed to assist administrators with common tasks, such as troubleshooting and querying information about the HPE Cray EX System and its components, system boot and shutdown, and replacing hardware components. There are similarities between SAT commands and xt commands used on the Cray XC platform.\nSAT Commands The top-level SAT man page describes the toolkit, documents the global options affecting all subcommands, documents configuration file options, and references the man page for each subcommand. SAT consists of many subcommands that each have their own set of options.\nSAT Container Environment The sat command-line utility runs in a container using Podman, a daemonless container runtime. SAT runs on Kubernetes control plane nodes. A few important points about the SAT container environment include the following:\nUsing either sat or sat bash always launches a container. The SAT container does not have access to the NCN file system. There are two ways to run sat.\nInteractive: Launching a container using sat bash, followed by a sat command. Non-interactive: Running a sat command directly on a Kubernetes control plane node. In both of these cases, a container is launched in the background to execute the command. The first option, running sat bash first, gives an interactive shell, at which point sat commands can be run. In the second option, the container is launched, executes the command, and upon the command\u0026rsquo;s completion the container exits. The following two examples show the same action, checking the system status, using both modes.\n(ncn-m001#) Here is an example using interactive mode:\nsat bash ((CONTAINER_ID) sat-container#) Example sat command after a container is launched:\nsat status (ncn-m001#) Here is an example using non-interactive mode:\nsat status Interactive Advantages Running sat using the interactive command prompt gives the ability to read and write local files on ephemeral container storage. If multiple sat commands are being run in succession, use sat bash to launch the container beforehand. This will save time because the container does not need to be launched for each sat command.\nNon-interactive Advantages The non-interactive mode is useful if calling sat with a script, or when running a single sat command as a part of several steps that need to be executed from a management NCN.\nMan Pages - Interactive and Non-interactive Modes To view a sat man page from a Kubernetes control plane node, use sat-man on the manager node.\n(ncn-m001#) Here is an example:\nsat-man status A man page describing the SAT container environment is available on the Kubernetes control plane nodes, which can be viewed either with man sat or man sat-podman from the manager node.\n(ncn-m001#) Here are examples:\nman sat man sat-podman Command Prompt Conventions in SAT The host name in a command prompt indicates where the command must be run. The user account that must run the command is also indicated in the prompt.\nThe root or super-user account always has host name in the prompt and the # character at the end of the prompt. Any non-root account is indicated with account@hostname\u0026gt;. A non-privileged account is referred to as user. The command prompt inside the SAT container environment is indicated with the string as follows. It also has the # character at the end of the prompt. Command Prompt Meaning ncn-m001# Run the command as root on the specific Kubernetes control plane server which has this hostname (ncn-m001 in this example). (Non-interactive) user@hostname\u0026gt; Run the command as any non-root user on the specified hostname. (Non-interactive) (venv) user@hostname\u0026gt; Run the command as any non-root user within a Python virtual environment on the specified hostname. (Non-interactive) (CONTAINER_ID) sat-container# Run the command inside the SAT container environment by first running sat bash. (Interactive) These command prompts should be inserted into text before the fenced code block instead of inside of it. This is a change from the documentation of SAT 2.5 and earlier. Here is an example of the new use of the command prompt:\n(ncn-m001#) Example first step.\nyes \u0026gt;/dev/null "
},
{
	"uri": "/docs-sat/en-26/usage/sat_bootprep/",
	"title": "SAT Bootprep",
	"tags": [],
	"description": "",
	"content": "SAT Bootprep SAT provides an automated solution for creating CFS configurations, building and configuring images in IMS, and creating BOS session templates. The solution is based on a given input file that defines how those configurations, images, and session templates should be created. This automated process centers around the sat bootprep command. Man page documentation for sat bootprep can be viewed similar to other SAT commands.\n(ncn-m001#) Here is an example:\nsat-man sat-bootprep The sat bootprep command helps the Install and Upgrade Framework (IUF) install, upgrade, and deploy products on systems managed by CSM. Outside of IUF, it is uncommon to use sat bootprep. For more information on this relationship, see SAT and IUF. For more information on IUF, see the IUF section of the Cray System Management Documentation.\nSAT Bootprep vs SAT Bootsys sat bootprep is used to create CFS configurations, build and rename IMS images, and create BOS session templates which tie the configurations and images together during a BOS session.\nsat bootsys automates several portions of the boot and shutdown processes, including (but not limited to) performing BOS operations (such as creating BOS sessions), powering on and off cabinets, and checking the state of the system prior to shutdown.\nEdit a Bootprep Input File The input file provided to sat bootprep is a YAML-formatted file containing information which CFS, IMS, and BOS use to create configurations, images, and BOS session templates respectively. Writing and modifying these input files is the main task associated with using sat bootprep. An input file is composed of three main sections, one each for configurations, images, and session templates. These sections may be specified in any order, and any of the sections may be omitted if desired.\nProvide a Schema Version The sat bootprep input file is validated against a versioned schema definition. The input file should specify the version of the schema with which it is compatible under a schema_version key. For example:\n--- schema_version: 1.0.2 (ncn-m001#) The current sat bootprep input file schema version can be viewed with the following command:\nsat bootprep view-schema | grep \u0026#39;^version:\u0026#39; Example output:\nversion: \u0026#39;1.0.2\u0026#39; The sat bootprep run command validates the schema version specified in the input file. The command also makes sure that the schema version of the input file is compatible with the schema version understood by the current version of sat bootprep. For more information on schema version validation, refer to the schema_version property description in the bootprep input file schema. For more information on viewing the bootprep input file schema in either raw form or user-friendly HTML form, see View SAT Bootprep Schema.\nThe default HPC CSM Software Recipe bootprep input files provided by the hpc-csm-software-recipe release distribution already contain the correct schema version.\nDefine CFS Configurations The CFS configurations are defined under a configurations key. Under this key, list one or more configurations to create. For each configuration, give a name in addition to the list of layers that comprise the configuration.\nEach layer can be defined by a product name and optionally a version number, commit hash, or branch in the product\u0026rsquo;s configuration repository. If this method is used, the layer is created in CFS by looking up relevant configuration information (including the configuration repository and commit information) from the cray-product-catalog Kubernetes ConfigMap as necessary. A version may be supplied. However, if it is absent, the version is assumed to be the latest version found in the cray-product-catalog.\nAlternatively, a configuration layer can be defined by explicitly referencing the desired configuration repository. Specify the intended version of the Ansible playbooks by providing a branch name or commit hash with branch or commit.\nThe following example shows a CFS configuration with two layers. The first layer is defined in terms of a product name and version, and the second layer is defined in terms of a Git clone URL and branch:\n--- configurations: - name: example-configuration layers: - name: example-product playbook: example.yml product: name: example version: 1.2.3 - name: another-example-product playbook: another-example.yml git: url: \u0026#34;https://vcs.local/vcs/another-example-config-management.git\u0026#34; branch: main When sat bootprep is run against an input file, a CFS configuration is created corresponding to each configuration in the configurations section. For example, the configuration created from an input file with the layers listed above might look something like the following:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2022-02-07T21:47:49Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://vcs.local/vcs/example-config-management.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;commit hash\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;example product\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;example.yml\u0026#34; }, { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://vcs.local/vcs/another-example-config-management.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;commit hash\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;another example product\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;another-example.yml\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;example-configuration\u0026#34; } Define IMS Images The IMS images are defined under an images key. Under the images key, the user may define one or more images to be created in a list. Each element of the list defines a separate IMS image to be built and/or configured. Images must contain a name key and a base key.\nThe name key defines the name of the resulting IMS image. The base key defines the base image to be configured or the base recipe to be built and optionally configured. One of the following keys must be present under the base key:\nUse an ims key to specify an existing image or recipe in IMS. Use a product key to specify an image or recipe provided by a particular version of a product. If a product provides more than one image or recipe, specify a filter to select one. For more information, see Filter Base Images or Recipes from a Product. Use an image_ref key to specify another image from the input file using its ref_name. Images may also contain the following keys:\nUse a configuration key to specify a CFS configuration with which to customize the built image. If a configuration is specified, then configuration groups must also be specified using the configuration_group_names key. Use a ref_name key to specify a unique name that can refer to this image within the input file in other images or in session templates. The ref_name key allows references to images from the input file that have dynamically generated names as described in Dynamic Variable Substitutions. Use a description key to describe the image in the bootprep input file. Note that this key is not currently used. Use Base Images or Recipes from IMS Here is an example of an image using an existing IMS recipe as its base. This example builds an IMS image from that recipe. It then configures it with a CFS configuration named example-compute-config. The example-compute-config CFS configuration can be defined under the configurations key in the same input file, or it can be an existing CFS configuration. Running sat bootprep against this input file results in an image named example-compute-image.\nimages: - name: example-compute-image description: \u0026gt; An example compute node image built from an existing IMS recipe. base: ims: name: example-compute-image-recipe type: recipe configuration: example-compute-config configuration_group_names: - Compute Use Base Images or Recipes from a Product Here is an example showing the definition of two images. The first image is built from a recipe provided by the uss product. The second image uses the first image as a base and configures it with a configuration named example-compute-config. The value of the first image\u0026rsquo;s ref_name key is used in the second image\u0026rsquo;s base.image_ref key to specify it as a dependency. Running sat bootprep against this input file results in two images, the first named example-uss-image and the second named example-compute-image.\nimages: - name: example-uss-image ref_name: example-uss-image description: \u0026gt; An example image built from the recipe provided by the USS product. base: product: name: uss version: 1.0.0 type: recipe - name: example-compute-image description: \u0026gt; An example image that is configured from an image built from the recipe provided by the USS product. base: image_ref: example-uss-image configuration: example-compute-config configuration_group_names: - Compute This example assumes that the given version of the uss product provides only a single IMS recipe. If more than one recipe is provided by the given version of the uss product, use a filter as described in Filter Base Images or Recipes from a Product.\nFilter Base Images or Recipes from a Product A product may provide more than one image or recipe. If this happens, filter the product\u0026rsquo;s images or recipes whenever a base image or recipe from that product is used. Beneath the base.product value within an image, specify a filter key to create a filter using the following criteria:\nUse the prefix key to filter based on a prefix matching the name of the image or recipe. Use the wildcard key to filter based on a shell-style wildcard matching the name of the image or recipe. Use the arch key to filter based on the target architecture of the image or recipe in IMS. When specifying more than one filter key, all filters must match only the desired image or recipe. An error occurs if either no images or recipes match the given filters or if more than one image or recipe matches the given filters.\nHere is an example of three IMS images built from the Kubernetes image and the Ceph storage image provided by the csm product. This example uses a prefix filter to select from the multiple images provided by the CSM product. The first two IMS images in the example find any image from the specified csm product version whose name starts with secure-kubernetes. The third image in the example finds any csm image whose name starts with secure-storage-ceph. All three images are then configured with a configuration named example-management-config. Running sat bootprep against this input file results in three IMS images named worker-example-csm-image, master-example-csm-image, and storage-example-csm-image.\nimages: - name: worker-example-csm-image base: product: name: csm version: 1.4.1 type: image filter: prefix: secure-kubernetes configuration: example-management-config configuration_group_names: - Management_Worker - name: master-example-csm-image base: product: name: csm version: 1.4.1 type: image filter: prefix: secure-kubernetes configuration: example-management-config configuration_group_names: - Management_Master - name: storage-example-csm-image base: product: name: csm version: 1.4.1 type: image filter: prefix: secure-storage-ceph configuration: example-management-config configuration_group_names: - Management_Storage Here is an example of two IMS images built from recipes provided by the uss product. This example uses an architecture filter to select from the multiple recipes provided by the USS product. The first image will be built from the x86_64 version of the IMS recipe provided by the specified version of the uss product. The second image will be built from the aarch64 version of the IMS recipe provided by the specified version of the uss product.\nimages: - name: example-uss-image-x86_64 ref_name: example-uss-image-x86_64 description: \u0026gt; An example image built from the x86_64 recipe provided by the USS product. base: product: name: uss version: 1.0.0 type: recipe filter: arch: x86_64 - name: example-uss-image-aarch64 ref_name: example-uss-image-aarch64 description: \u0026gt; An example image built from the aarch64 recipe provided by the USS product. base: product: name: uss version: 1.0.0 type: recipe filter: arch: aarch64 Define BOS Session Templates The BOS session templates are defined under the session_templates key. Each session template must provide values for the name, image, configuration, and bos_parameters keys. The name key defines the name of the resulting BOS session template. The image key defines the image to use in the BOS session template. One of the following keys must be present under the image key:\nUse an ims key to specify an existing image or recipe in IMS. Use an image_ref key to specify another image from the input file using its ref_name. The configuration key defines the CFS configuration specified in the BOS session template.\nThe bos_parameters key defines parameters that are passed through directly to the BOS session template. The bos_parameters key should contain a boot_sets key, and each boot set in the session template should be specified under boot_sets. Each boot set can contain the following keys, all of which are optional:\nUse an arch key to specify the architecture of the nodes that should be targeted by the boot set. Valid values are the same as those used by Hardware State Manager (HSM). Use a kernel_parameters key to specify the parameters passed to the kernel on the command line. Use a network key to specify the network over which the nodes boot. Use a node_list key to specify the nodes to add to the boot set. Use a node_roles_groups key to specify the HSM roles to add to the boot set. Use a node_groups key to specify the HSM groups to add to the boot set. Use a rootfs_provider key to specify the root file system provider. Use a rootfs_provider_passthrough key to specify the parameters to add to the rootfs= kernel parameter. As mentioned above, the parameters under bos_parameters are passed through directly to BOS. For more information on the properties of a BOS boot set, refer to BOS Session Templates in the Cray System Management Documentation.\nHere is an example of a BOS session template that refers to an existing IMS image by name and targets nodes with the role Compute and the architecture X86 in HSM:\nsession_templates: - name: example-session-template image: ims: name: example-image configuration: example-configuration bos_parameters: boot_sets: example_boot_set: arch: X86 kernel_parameters: ip=dhcp quiet node_roles_groups: - Compute rootfs_provider: cpss3 rootfs_provider_passthrough: dvs:api-gw-service-nmn.local:300:nmn0 Here is an example of a BOS session template that refers to an image from the input file by its ref_name and targets nodes with the role Compute and the architecture ARM in HSM. Note that using the image_ref key requires that an image defined in the input file specifies example-image as the value of its ref_name key.\nsession_templates: - name: example-session-template image: image_ref: example-image configuration: example-configuration bos_parameters: boot_sets: example_boot_set: arch: ARM kernel_parameters: ip=dhcp quiet node_roles_groups: - Compute rootfs_provider: cpss3 rootfs_provider_passthrough: dvs:api-gw-service-nmn.local:300:nmn0 HPC CSM Software Recipe Variable Substitutions The sat bootprep command takes any variables provided and substitutes them into the input file. Variables are sourced from the command line, any variable files directly provided, and the HPC CSM Software Recipe files used, in that order. When providing values through a variable file, sat bootprep substitutes the values with Jinja2 template syntax. The HPC CSM Software Recipe provides default variables in a product_vars.yaml variable file. This file defines information about each HPC software product included in the recipe.\nVariables are primarily substituted into the default HPC CSM Software Recipe bootprep input files through IUF. However, variable files can also be given to sat bootprep directly from IUF\u0026rsquo;s use of the recipe. When using variables directly with sat bootprep, there are some limitations. For more information on SAT variable limitations, see SAT and IUF. For more information on IUF and variable substitutions, see the IUF section of the Cray System Management Documentation.\nSelect an HPC CSM Software Recipe Version View a listing of the default HPC CSM Software Recipe variables and their values by running sat bootprep list-vars. For more information on options that can be used with the list-vars subcommand, refer to the man page for the sat bootprep subcommand.\nBy default, the sat bootprep command uses the variables from the latest installed version of the HPC CSM Software Recipe. Override this with the --recipe-version command line argument to sat bootprep run.\n(ncn-m001#) For example, to explicitly select the 22.11.0 version of the HPC CSM Software Recipe default variables, specify --recipe-version 22.11.0:\nsat bootprep run --recipe-version 22.11.0 compute-and-uan-bootprep.yaml Values Supporting Jinja2 Template Rendering The entire sat bootprep input file is not rendered by the Jinja2 template engine. Jinja2 template rendering of the input file is performed individually for each supported value. The values of the following keys in the bootprep input file support rendering as a Jinja2 template and thus support variables:\nThe name key of each configuration under the configurations key. The following keys of each layer under the layers key in a configuration: name playbook git.branch product.version product.branch The following keys of each image under the images key: name base.product.version base.product.filter.arch base.product.filter.prefix base.product.filter.wildcard configuration The following keys of each session template under the session_templates key: name configuration You can use Jinja2 built-in filters in values of any of the keys listed above. In addition, Python string methods can be called on the string variables.\nHyphens in HPC CSM Software Recipe Variables Variable names with hyphens are not allowed in Jinja2 expressions because they are parsed as an arithmetic expression instead of a single variable. To support product names with hyphens, sat bootprep converts hyphens to underscores in all top-level keys of the default HPC CSM Software Recipe variables. It also converts any variables sourced from the command line or any variable files provided directly. When referring to a variable with hyphens in the bootprep input file, keep this in mind. For example, to refer to the product version variable for slingshot-host-software in the bootprep input file, write \u0026quot;{{slingshot_host_software.version}}\u0026quot;.\nHPC CSM Software Recipe Variable Substitution Example The following example bootprep input file shows how a variable of a USS version can be used in an input file that creates a CFS configuration for computes. Only one layer is shown for brevity.\n--- configurations: - name: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; layers: - name: uss-compute-{{uss.working_branch}} playbook: cos-compute.yml product: name: uss version: \u0026#34;{{uss.version}}\u0026#34; branch: \u0026#34;{{uss.working_branch}}\u0026#34; Note: When the value of a key in the bootprep input file is a Jinja2 expression, it must be quoted to pass YAML syntax checking.\nJinja2 expressions can also use filters and Python\u0026rsquo;s built-in string methods to manipulate the variable values. For example, suppose only the major and minor components of a USS version are to be used in the branch name for the USS layer of the CFS configuration. Use the split string method to achieve this as follows:\n--- configurations: - name: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; layers: - name: uss-compute-{{uss.working_branch}} playbook: cos-compute.yml product: name: uss version: \u0026#34;{{uss.version}}\u0026#34; branch: integration-{{uss.version.split(\u0026#39;.\u0026#39;)[0]}}-{{uss.version.split(\u0026#39;.\u0026#39;)[1]}} Dynamic Variable Substitutions Additional variables are available besides the default variables provided by the HPC CSM Software Recipe. (For more information, see HPC CSM Software Recipe Variable Substitutions.) These additional variables are dynamic because their values are determined at run-time based on the context in which they appear. Available dynamic variables include the following:\nThe variable base.name can be used in the name of an image under the images key. The value of this variable is the name of the IMS image or recipe used as the base of this image.\nThe variable image.name can be used in the name of a session template under the session_templates key. The value of this variable is the name of the IMS image used in this session template.\nNote: The name of a session template is restricted to 45 characters. Keep this in mind when using image.name in the name of a session template.\nThese variables reduce the need to duplicate values throughout the sat bootprep input file and make the following use cases possible:\nBuilding an image from a recipe provided by a product and using the name of the recipe in the name of the resulting image Using the name of the image in the name of a session template when the image is generated as described in the previous use case Example Bootprep Input Files This section provides an example bootprep input file. It also gives instructions for obtaining the default bootprep input files delivered with a release of the HPC CSM Software Recipe.\nExample Bootprep Input File The following bootprep input file provides an example of using most of the features described in previous sections. It is not intended to be a complete bootprep file for the entire CSM product.\n--- configurations: - name: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; layers: - name: uss-compute-{{uss.working_branch}} playbook: cos-compute.yml product: name: uss version: \u0026#34;{{uss.version}}\u0026#34; branch: \u0026#34;{{uss.working_branch}}\u0026#34; - name: cpe-pe_deploy-{{cpe.working_branch}} playbook: pe_deploy.yml product: name: cpe version: \u0026#34;{{cpe.version}}\u0026#34; branch: \u0026#34;{{cpe.working_branch}}\u0026#34; images: - name: \u0026#34;{{default.note}}{{base.name}}{{default.suffix}}\u0026#34; ref_name: base_uss_image base: product: name: uss type: recipe version: \u0026#34;{{uss.version}}\u0026#34; - name: \u0026#34;compute-{{base.name}}\u0026#34; ref_name: compute_image base: image_ref: base_uss_image configuration: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; configuration_group_names: - Compute session_templates: - name: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; image: image_ref: compute_image configuration: \u0026#34;{{default.note}}compute-{{recipe.version}}{{default.suffix}}\u0026#34; bos_parameters: boot_sets: compute: kernel_parameters: ip=dhcp quiet spire_join_token=${SPIRE_JOIN_TOKEN} node_roles_groups: - Compute rootfs_provider_passthrough: \u0026#34;dvs:api-gw-service-nmn.local:300:hsn0,nmn0:0\u0026#34; Access Default Bootprep Input Files Default bootprep input files are delivered by the HPC CSM Software Recipe product. Access these files by cloning the hpc-csm-software-recipe repository, as described in the Accessing sat bootprep files process of the Cray System Management Documentation.\n(ncn-m001#) Find the default input files in the bootprep directory of the cloned repository:\nls bootprep/ Generate an Example Bootprep Input File The sat bootprep generate-example command was not updated for recent bootprep schema changes. It is recommended to instead use the default bootprep input files described in Access Default Bootprep Input Files. The sat bootprep generate-example command will be updated in a future release of SAT.\nSummary of SAT Bootprep Results The sat bootprep run command uses information from the bootprep input file to create CFS configurations, IMS images, and BOS session templates. For easy reference, the command also includes output summarizing the final creation results.\n(ncn-m001#) Here is a sample table output after running sat bootprep run:\n################################################################################ CFS configurations ################################################################################ +------------------+ | name | +------------------+ | example-config-1 | | example-config-2 | +------------------+ ################################################################################ IMS images ################################################################################ +---------------+--------------------------------------+--------------------------------------+----------------+----------------------------+ | name | preconfigured_image_id | final_image_id | configuration | configuration_group_names | +---------------+--------------------------------------+--------------------------------------+----------------+----------------------------+ | example-image | c1bcaf00-109d-470f-b665-e7b37dedb62f | a22fb912-22be-449b-a51b-081af2d7aff6 | example-config | Compute | +---------------+--------------------------------------+--------------------------------------+----------------+----------------------------+ ################################################################################ BOS session templates ################################################################################ +------------------+----------------+ | name | configuration | +------------------+----------------+ | example-template | example-config | +------------------+----------------+ View SAT Bootprep Schema The contents of the YAML input files used by sat bootprep must conform to a schema which defines the structure of the data. The schema definition is written using the JSON Schema format. (Although the format is named \u0026ldquo;JSON Schema\u0026rdquo;, the schema itself is written in YAML as well.) More information, including introductory materials and a formal specification of the JSON Schema metaschema, can be found on the JSON Schema website.\nView the Exact Schema Specification (ncn-m001#) To view the exact schema specification, run sat bootprep view-schema.\nsat bootprep view-schema --- $schema: \u0026#34;https://json-schema.org/draft/2020-12/schema\u0026#34; Example output:\ntitle: Bootprep Input File description: \u0026gt; A description of the set of CFS configurations to create, the set of IMS images to create and optionally customize with the defined CFS configurations, and the set of BOS session templates to create that reference the defined images and configurations. type: object additionalProperties: false properties: ... Generate User-Friendly Documentation The raw schema definition can be difficult to understand without experience working with JSON Schema specifications. For this reason, a feature is included with sat bootprep that generates user-friendly HTML documentation for the input file schema. This HTML documentation can be browsed with a web browser.\n(ncn-m001#) Create a documentation tarball using sat bootprep.\nsat bootprep generate-docs Example output:\nINFO: Wrote input schema documentation to /root/bootprep-schema-docs.tar.gz An alternate output directory can be specified with the --output-dir option. The generated tarball is always named bootprep-schema-docs.tar.gz.\nsat bootprep generate-docs --output-dir /tmp Example output:\nINFO: Wrote input schema documentation to /tmp/bootprep-schema-docs.tar.gz (user@hostname\u0026gt;) From another machine, copy the tarball to a local directory.\nscp root@ncn-m001:bootprep-schema-docs.tar.gz . (user@hostname\u0026gt;) Extract the contents of the tarball and open the contained index.html.\ntar xzvf bootprep-schema-docs.tar.gz Example output:\nx bootprep-schema-docs/ x bootprep-schema-docs/index.html x bootprep-schema-docs/schema_doc.css x bootprep-schema-docs/schema_doc.min.js another-machine$ open bootprep-schema-docs/index.html "
},
{
	"uri": "/docs-sat/en-26/release_notes/sat_2.5_release_notes/",
	"title": "Changes in SAT 2.5",
	"tags": [],
	"description": "",
	"content": "Changes in SAT 2.5 The 2.5.17 version of the SAT product includes:\nVersion 3.21.4 of the sat python package and CLI. Version 2.0.0-1 of the sat-podman wrapper script. Version 1.6.0 of the sat-install-utility container image. Version 3.3.1 of the cfs-config-util container image. New sat Commands sat jobstat allows access to application and job data through the command line. It provides a table summarizing information for all jobs on the system.\nChanges to sat bootprep A list-vars subcommand was added to sat bootprep.\nIt lists the variables available for use in bootprep input files at runtime.\nA --limit option was added to sat bootprep run.\nIt restricts the creation of CFS configurations, IMS images, and BOS session templates into separate stages. For more information, see Limit SAT Bootprep Run into Stages.\nsat bootprep now prompts individually for each CFS configuration that already exists.\nsat bootprep can now filter images provided by a product by using a prefix.\nThis is useful when specifying the base of an image in a bootprep input file. For more information, see Define IMS Images.\nTo support product names with hyphens, sat bootprep now converts hyphens to underscores within variables.\nFor more information, see Hyphens in HPC CSM Software Recipe Variables.\nIn sat bootprep input files, the value of the playbook property of CFS configuration layers can now be rendered with Jinja2 templates.\nFor more information, see Values Supporting Jinja2 Template Rendering.\nOutput was added to sat bootprep run that summarizes the CFS configurations, IMS images, and BOS session templates created.\nFor more information, see Summary of SAT Bootprep Results.\nImprovements were made to the sat bootprep output when CFS configuration and BOS session templates are created.\nChanges to sat bootsys A reboot subcommand was added to sat bootsys. It uses BOS to reboot nodes in the bos-operations stage. The --staged-session option was added to sat bootsys. It can be used to create staged BOS sessions. For more information, refer to Staging Changes with BOS in the Cray System Management Documentation. Changes to Other sat Commands When switching SAT versions with prodmgr, a version is no longer set as \u0026ldquo;active\u0026rdquo; in the product catalog. The \u0026ldquo;active\u0026rdquo; field was also removed from the output of sat showrev. Improvements were made to the performance of sat status when using BOS version two. New Install and Upgrade Framework The new Install and Upgrade Framework (IUF) provides commands which install, upgrade, and deploy products with the help of sat bootprep on HPE Cray EX systems managed by Cray System Management (CSM). IUF capabilities are described in detail in the IUF section of the Cray System Management Documentation. The initial install and upgrade workflows described in the HPE Cray EX System Software Stack Installation and Upgrade Guide for CSM (S-8052) detail when and how to use IUF with a new release of SAT or any other HPE Cray EX product.\nBecause IUF now handles NCN personalization, information about this process was removed from the SAT documentation. Other sections in the documentation were also revised to support the new Install and Upgrade Framework. For example, the SAT Installation and SAT Upgrade sections of this guide now provide details on software and configuration content specific to SAT. The Cray System Management Documentation will indicate when these sections should be referred to for detailed information.\nFor more information on the relationship between sat bootprep and IUF, see SAT and IUF.\nNew Default BOS Version By default, SAT now uses version two of the Boot Orchestration Service (BOS). This change to BOS v2 impacts the following commands that interact with BOS:\nsat bootprep sat bootsys sat status To change the default to a different BOS version, see Change the BOS Version.\nSecurity Updated the version of certifi in the sat python package and CLI from 2021.10.8 to 2022.12.7 to resolve CVE-2022-23491. Updated the version of certifi in the sat-install-utility container image from 2021.5.30 to 2022.12.7 to resolve CVE-2022-23491. Updated the version of oauthlib from 3.2.1 to 3.2.2 to resolve CVE-2022-36087. Updated the version of cryptography from 36.0.1 to 39.0.1 to resolve CVE-2023-23931. Bug Fixes Fixed a bug that prevented sat init from creating a configuration file in the current directory when not prefixed with ./. Fixed a bug in which sat status failed with a traceback when using BOS version two and reported components whose most recent image did not exist. Fixed a build issue where the sat container could contain a different version of kubectl than the version found in CSM. Fixed error handling and improved command messages for sat bootprep and sat swap blade. "
},
{
	"uri": "/docs-sat/en-26/about_sat/sat_in_csm/",
	"title": "SAT in CSM",
	"tags": [],
	"description": "",
	"content": "SAT in CSM In CSM 1.3 and newer, the sat command is automatically available on the Kubernetes control plane, but it is still possible to install SAT as a separate product stream. Any version of SAT installed as a separate product stream overrides the sat command available in CSM. Installing the SAT product stream allows additional supporting components to be added:\nAn entry for SAT in the cray-product-catalog Kubernetes ConfigMap is only created by installing the SAT product stream. Otherwise, there will be no entry for this version of SAT in the output of sat showrev.\nThe sat-install-utility container image is only available with the full SAT product stream. This container image provides uninstall and downgrade functionality when used with the prodmgr command. (In SAT 2.3 and older, SAT was only available to install as a separate product stream. Because these versions were packaged with sat-install-utility, it is still possible to uninstall these versions of SAT.)\nThe docs-sat RPM package is only available with the full SAT product stream.\nThe sat-config-management git repository in Gitea (VCS) and thus the SAT layer of NCN CFS configuration is only available with the full SAT product stream.\nIf the SAT product stream is not installed, there will be no configuration content for SAT in VCS. Therefore, CFS configurations that apply to management NCNs (for example, management-23.5.0) should not include a SAT layer.\nThe SAT configuration layer modifies the permissions of files left over from prior installations of SAT, so that the Keycloak username that authenticates to the API gateway cannot be read by users other than root. Specifically, it does the following:\nModifies the sat.toml configuration file which contains the username so that it is only readable by root.\nModifies the /root/.config/sat/tokens directory so that the directory is only readable by root. This is needed because the names of the files within the tokens directory contain the username.\nRegardless of the SAT configuration being applied, passwords and the contents of the tokens are never readable by other users. These permission changes only apply to files created by previous installations of SAT. In the current version of SAT all files and directories are created with the appropriate permissions.\n"
},
{
	"uri": "/docs-sat/en-26/release_notes/sat_2.6_release_notes/",
	"title": "Changes in SAT 2.6",
	"tags": [],
	"description": "",
	"content": "Changes in SAT 2.6 The 2.6.14 version of the SAT product includes:\nVersion 3.25.10 of the sat python package and CLI. Version 2.0.0-1 of the sat-podman wrapper script. Version 1.6.2 of the sat-install-utility container image. New sat Commands No new sat commands were added in SAT 2.6.\nChanges to sat bootsys Functionality was added to the platform-services and cabinet-power stages of sat bootsys boot. This allows SAT to automatically recreate Kubernetes CronJobs that may have become stuck during shutdown, boot, or reboot.\nsat bootsys boot more reliably determines if the hms-discovery CronJob was scheduled during the cabinet-power stage.\nSAT now uses the BatchV1 Kubernetes API to manipulate CronJobs instead of the BatchV1Beta1 API.\nsat bootsys now logs the ID of all BOS sessions when performing BOS operations. A warning is logged for any BOS sessions with failed components.\nSupport for the Compute Rolling Upgrade Service (CRUS) has been removed, and the sat bootsys command will no longer interact with CRUS.\nThe bos-operations stage of sat bootsys no longer checks whether BOS session templates need any operations to be performed before creating a BOS session. BOS instead determines whether the session will need to boot or shut down any nodes to reach the desired state.\nChanges to sat bootprep Wildcard matching was added for images in sat bootprep input files. Use wildcards similar to how prefix filters were used in older versions of SAT. For more information, see Define IMS Images.\nSupport for multiple architectures was added to sat bootprep. It is now possible to filter base IMS images and recipes from products based on their target architecture. This support also allows specifying target architectures in boot sets of BOS session templates. For more information, see Filter Base Images or Recipes from a Product and Define BOS Session Templates.\nWhen specifying a base image or recipe from a product, sat bootprep can combine multiple image or recipe filters. When specifying multiple filters, the unique base image or recipe that satisfies all of the given filters is selected. An error occurs if either no images or recipes match the given filters or if more than one image or recipe matches the given filters.\nIn CFS configuration layers, support was added for the new imsRequireDkms field under the specialParameters section. CFS configurations in bootprep input files can specify an ims_require_dkms field in a new, optional special_parameters section for each layer.\nOther SAT Changes The SAT Kibana and Grafana dashboards were moved to the System Monitoring Application (SMA) beside other dashboards. For more information on how to view these dashboards going forward, see the HPE Cray EX System Monitoring Application Administration Guide (S-8029).\nAdd the new s3.cert_verify option to the SAT configuration file to control whether certificate verification is performed when accessing S3.\nLog messages spanning multiple lines now print the log level on each line instead of only at the beginning of the message.\nWhen certificate verification is disabled for CSM API requests, only a single warning now prints at the beginning of SAT\u0026rsquo;s invocation instead of for each request.\nsat swap blade more reliably determines if the hms-discovery CronJob was scheduled when enabling a blade following a hardware swap.\nsat swap blade will use the BatchV1 Kubernetes API to manipulate CronJobs, instead of the BatchV1Beta1 API as previously.\nCommand prompts in this guide are now inserted into text before the fenced code block instead of inside of it. This is a change from the documentation of SAT 2.5 and earlier. In addition, two new command prompts were added for better clarity. For more information, see Command Prompt Conventions in SAT.\nMulti-tenancy Support SAT 2.6 supports supplying tenant information to CSM services in order to allow tenant admins to use SAT within their tenant. For more information, see Configure multi-tenancy.\nSecurity Updated the version of cryptography from 36.0.1 to 41.0.0 to resolve CVE-2023-2650.\nUpdated the version of requests from 2.27.1 to 2.31.0 to resolve CVE-2023-32681.\nUpdated the version of curl/libcurl from 7.80.0-r6 to 8.1.2-r0 to address CVE-2023-27536.\nBug Fixes Improved extreme slowness in the platform-services stage of sat bootsys shutdown in cases where a large known_hosts file is used on the host where SAT is running.\nFixed a bug that caused the wrong container name to be logged when CFS configuration sessions failed on newer CSM systems.\n"
},
{
	"uri": "/docs-sat/en-26/about_sat/view_sat_docs/",
	"title": "View SAT Documentation",
	"tags": [],
	"description": "",
	"content": "View SAT Documentation View the System Admin Toolkit (SAT) documentation both online and offline by using the information in this section.\nOnline Documentation The SAT documentation can be found online in HTML form at the following link: SAT Documentation. The navigation pane on the left of the HTML page orders topics alphabetically. Navigate an individual topic\u0026rsquo;s headings by using the Headings icon at the top of the page, as shown in the following images.\nThe documentation can also be viewed online in GitHub by navigating to the docs/ subdirectory of the docs-sat repository. Navigate an individual topic\u0026rsquo;s headings with a similar Headings icon at the top of the page, as shown in the following images.\nOffline Documentation The SAT documentation is available offline as markdown, which can be viewed with a markdown viewer or with a text editor. The offline documentation is available in the docs/ directory of the SAT release distribution as well as in RPM package format. The RPM package is installed as a part of the Ansible plays launched by the Configuration Framework Service (CFS). Its files are installed to /usr/share/doc/sat.\n"
},
{
	"uri": "/docs-sat/en-26/release_notes/shasta_1.3.2_release_notes/",
	"title": "SAT Changes in Shasta v1.3.2",
	"tags": [],
	"description": "",
	"content": "SAT Changes in Shasta v1.3.2 Shasta v1.3.2 included version 2.4.0 of the sat python package and CLI.\nThe following sections detail the changes in this release.\nsat swap Command for Switch and Cable Replacement The sat switch command which supported operations for replacing a switch has been deprecated and replaced with the sat swap command, which now supports replacing a switch OR cable.\nThe sat swap switch command is equivalent to sat switch. The sat switch command will be removed in a future release.\nAddition of Stages to sat bootsys Command The sat bootsys command now has multiple stages for both the boot and shutdown actions. Please refer to the \u0026ldquo;System Power On Procedures\u0026rdquo; and \u0026ldquo;System Power Off Procedures\u0026rdquo; sections of the Cray Shasta Administration Guide (S-8001) for more details on using this command in the context of a full system power off and power on.\n"
},
{
	"uri": "/docs-sat/en-26/external_system/",
	"title": "SAT on an External System",
	"tags": [],
	"description": "",
	"content": "SAT on an External System SAT can optionally be installed and configured on an external system to interact with CSM over the CAN.\nLimitations Most SAT subcommands work by accessing APIs which are reachable via the CAN. However, certain SAT commands depend on host-based functionality on the management NCNs and will not work from an external system. This includes the following:\nThe platform-services and ncn-power stages of sat bootsys The local host information displayed by the --local option of sat showrev Installing SAT on an external system is not an officially supported configuration. These instructions are provided \u0026ldquo;as-is\u0026rdquo; with the hope that they can be useful for users who desire additional flexibility.\nCertain additional steps may need to be taken to install and configure SAT depending on the configuration of the external system in use. These additional steps may include provisioning virtual machines, installing packages, or configuring TLS certificates, and these steps are outside the scope of this documentation. This section covers only the steps needed to configure SAT to use externally-accessible API endpoints exposed by CSM.\nInstall and Configure SAT Prerequisites The external system must be on the Customer Access Network (CAN). Python 3.7 or newer is installed on the system. kubectl, openssh, git, and curl are installed on the external system. The root CA certificates used when installing CSM have been added to the external system\u0026rsquo;s trust store such that authenticated TLS connections can be made to the CSM REST API gateway. For more information, refer to Certificate Authority in the Cray System Management Documentation. Procedure (user@hostname\u0026gt;) Create a Python virtual environment.\nSAT_VENV_PATH=\u0026#34;$(pwd)/venv\u0026#34; python3 -m venv ${SAT_VENV_PATH} . ${SAT_VENV_PATH}/bin/activate ((venv) user@hostname\u0026gt;) Clone the SAT source code.\nTo use SAT version 3.21, this example clones the release/3.21 branch of Cray-HPE/sat.\ngit clone --branch=release/3.21 https://github.com/Cray-HPE/sat.git Set up the SAT CSM Python dependencies to be installed from their source code.\nSAT CSM Python dependency packages are not currently distributed publicly as source packages or binary distributions. They must be installed from their source code hosted on GitHub. Also, to install the cray-product-catalog Python package, first clone it locally. Use the following steps to modify the SAT CSM Python dependencies so they can be installed from their source code.\n((venv) user@hostname\u0026gt;) Clone the source code for cray-product-catalog.\ngit clone --branch v1.6.0 https://github.com/Cray-HPE/cray-product-catalog ((venv) user@hostname\u0026gt;) In the cray-product-catalog directory, create a file named .version that contains the version of cray-product-catalog.\necho 1.6.0 \u0026gt; cray-product-catalog/.version ((venv) user@hostname\u0026gt;) Open the \u0026ldquo;locked\u0026rdquo; requirements file in a text editor.\nvim sat/requirements.lock.txt Update the line containing cray-product-catalog so that it reflects the local path to cray-product-catalog.\nIt should read as follows:\n./cray-product-catalog For versions of SAT newer than 3.19, change the line containing csm-api-client to read as follows.\ncsm-api-client@git+https://github.com/Cray-HPE/python-csm-api-client@release/1.1 (Optional) ((venv) user@hostname\u0026gt;) Confirm that requirements.lock.txt is modified as expected.\ngrep -E \u0026#39;cray-product-catalog|csm-api-client\u0026#39; sat/requirements.lock.txt Example output:\n./cray-product-catalog csm-api-client@git+https://github.com/Cray-HPE/python-csm-api-client@release/1.1 Note: For versions newer than 3.19, the output will show both cray-product-catalog and csm-api-client. For version 3.19 and older, the output will only show cray-product-catalog.\n((venv) user@hostname\u0026gt;) Install the modified SAT dependencies.\npip install -r sat/requirements.lock.txt ((venv) user@hostname\u0026gt;) Install the SAT Python package.\npip install ./sat (Optional) ((venv) user@hostname\u0026gt;) Add the sat virtual environment to the user\u0026rsquo;s PATH environment variable.\nIf a shell other than bash is in use, replace ~/.bash_profile with the appropriate profile path.\nIf the virtual environment is not added to the user\u0026rsquo;s PATH environment variable, then source ${SAT_VENV_PATH}/bin/activate will need to be run before running any SAT commands.\ndeactivate echo export PATH=\\\u0026#34;${SAT_VENV_PATH}/bin:${PATH}\\\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile (user@hostname\u0026gt;) Copy the file /etc/kubernetes/admin.conf from ncn-m001 to ~/.kube/config on the external system.\nNote that this file contains credentials to authenticate against the Kubernetes API as the administrative user, so it should be treated as sensitive.\nmkdir -p ~/.kube scp ncn-m001:/etc/kubernetes/admin.conf ~/.kube/config\\ Example output:\nadmin.conf 100% 5566 3.0MB/s 00:00 (user@hostname\u0026gt;) Find the CAN IP address on ncn-m001 to determine the corresponding kubernetes hostname.\nOn CSM 1.2 and newer, query the IP address of the bond0.cmn0 interface.\nssh ncn-m001 ip addr show bond0.cmn0 Example output:\n13: bond0.cmn0@bond0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether b8:59:9f:1d:d9:0e brd ff:ff:ff:ff:ff:ff inet 10.102.1.11/24 brd 10.102.1.255 scope global vlan007 valid_lft forever preferred_lft forever inet6 fe80::ba59:9fff:fe1d:d90e/64 scope link valid_lft forever preferred_lft forever On CSM versions prior to 1.2, query the IP address of the vlan007 interface.\nssh ncn-m001 ip addr show vlan007 Example output:\n13: vlan007@bond0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether b8:59:9f:1d:d9:0e brd ff:ff:ff:ff:ff:ff inet 10.102.1.10/24 brd 10.102.1.255 scope global vlan007 valid_lft forever preferred_lft forever inet6 fe80::ba59:9fff:fe1d:d90e/64 scope link valid_lft forever preferred_lft forever (user@hostname\u0026gt;) Set the IP_ADDRESS variable to the value found in the previous step.\nIP_ADDRESS=10.102.1.11 (user@hostname\u0026gt;) Add an entry to /etc/hosts mapping the IP address to the hostname kubernetes.\necho \u0026#34;${IP_ADDRESS} kubernetes\u0026#34; | sudo tee -a /etc/hosts 10.102.1.11 kubernetes (user@hostname\u0026gt;) Modify ~/.kube/config to set the cluster server address.\nThe value of the server key for the kubernetes cluster under the clusters section should be set to https://kubernetes:6443.\n--- clusters: - cluster: certificate-authority-data: REDACTED server: https://kubernetes:6443 name: kubernetes ... (user@hostname\u0026gt;) Confirm that kubectl can access the CSM Kubernetes cluster.\nkubectl get nodes Example output:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready master 135d v1.19.9 ncn-m002 Ready master 136d v1.19.9 ncn-m003 Ready master 136d v1.19.9 ncn-w001 Ready \u0026lt;none\u0026gt; 136d v1.19.9 ncn-w002 Ready \u0026lt;none\u0026gt; 136d v1.19.9 ncn-w003 Ready \u0026lt;none\u0026gt; 136d v1.19.9 (user@hostname\u0026gt;) Use sat init to create a configuration file for SAT.\nsat init Example output:\nINFO: Configuration file \u0026#34;/home/user/.config/sat/sat.toml\u0026#34; generated. (user@hostname\u0026gt;) Copy the platform CA certificates from the management NCN and configure the certificates for use with SAT.\nIf a shell other than bash is in use, replace ~/.bash_profile with the appropriate profile path.\nscp ncn-m001:/etc/pki/trust/anchors/platform-ca-certs.crt . echo export REQUESTS_CA_BUNDLE=\\\u0026#34;$(realpath platform-ca-certs.crt)\\\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile Edit the SAT configuration file to set the API and S3 hostnames.\nExternally available API endpoints are given domain names in PowerDNS, so the endpoints in the configuration file should each be set to the format subdomain.system-name.site-domain. Here system-name and site-domain are replaced with the values specified during csi config init, and subdomain is the DNS name for the externally available service. For more information, refer to Externally Exposed Services in the Cray System Management Documentation.\nThe API gateway has the subdomain api, and S3 has the subdomain s3. The S3 endpoint runs on port 8080. The following options should be set in the SAT configuration file.\n[api_gateway] host = \u0026#34;api.system-name.site-domain\u0026#34; [s3] endpoint = \u0026#34;http://s3.system-name.site-domain:8080\u0026#34; Edit the SAT configuration file to specify the Keycloak user who will be accessing the REST API.\n[api_gateway] username = \u0026#34;user\u0026#34; (user@hostname\u0026gt;) Run sat auth, and enter the password when prompted.\nThe admin account used to authenticate with sat auth must be enabled in Keycloak and must have its assigned role set to admin.\nsat auth Example output:\nPassword for user: Succeeded! For more information on authentication types and authentication credentials, see SAT Command Authentication. For more information on Keycloak accounts and changing Role Mappings, refer to both Configure Keycloak Account and Create Internal User Accounts in the Keycloak Shasta Realm in the Cray System Management Documentation.\n(user@hostname\u0026gt;) Ensure the files are readable only by the current user.\ntouch ~/.config/sat/s3_access_key \\ ~/.config/sat/s3_secret_key chmod 600 ~/.config/sat/s3_access_key \\ ~/.config/sat/s3_secret_key (user@hostname\u0026gt;) Write the credentials to local files using kubectl.\nGenerate S3 credentials and write them to a local file so the SAT user can access S3 storage. In order to use the SAT S3 bucket, the user must generate the S3 access key and secret keys and write them to a local file. SAT uses S3 storage for several purposes, most importantly to store the site-specific information set with sat setrev.\nkubectl get secret sat-s3-credentials -o json -o \\ jsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 -d \u0026gt; \\ ~/.config/sat/s3_access_key kubectl get secret sat-s3-credentials -o json -o \\ jsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 -d \u0026gt; \\ ~/.config/sat/s3_secret_key "
},
{
	"uri": "/docs-sat/en-26/release_notes/shasta_1.3_release_notes/",
	"title": "SAT Changes in Shasta v1.3",
	"tags": [],
	"description": "",
	"content": "SAT Changes in Shasta v1.3 Shasta v1.3 included version 2.2.3 of the sat python package and CLI.\nThis version of the sat CLI contained the following commands:\nauth bootsys cablecheck diag firmware hwinv hwmatch k8s linkhealth sensors setrev showrev status swap switch For more information on each of these commands, see the SAT Command Overview and the table of commands in the SAT Command Authentication section of this document.\n"
},
{
	"uri": "/docs-sat/en-26/release_notes/shasta_1.4.1_release_notes/",
	"title": "SAT Changes in Shasta v1.4.1",
	"tags": [],
	"description": "",
	"content": "SAT Changes in Shasta v1.4.1 We released version 2.0.4 of the SAT product in Shasta v1.4.1.\nThis version of the SAT product included:\nVersion 3.5.0 of the sat python package and CLI. Version 1.4.3 of the sat-podman wrapper script. The following sections detail the changes in this release.\nNew Commands to Translate Between NIDs and XNames Two new commands were added to translate between NIDs and XNames:\nsat nid2xname sat xname2nid These commands perform this translation by making requests to the Hardware State Manager (HSM) API.\nBug Fixes Fixed a problem in sat swap where creating the offline port policy failed. Changed sat bootsys shutdown --stage bos-operations to no longer forcefully power off all compute nodes and application nodes using CAPMC when BOS sessions complete or time out. Fixed an issue with the command sat bootsys boot --stage cabinet-power. "
},
{
	"uri": "/docs-sat/en-26/release_notes/shasta_1.4_release_notes/",
	"title": "SAT Changes in Shasta v1.4",
	"tags": [],
	"description": "",
	"content": "SAT Changes in Shasta v1.4 In Shasta v1.4, SAT became an independent product, which meant we began to designate a version number for the entire SAT product. We released version 2.0.3 of the SAT product in Shasta v1.4.\nThis version of the SAT product included the following components:\nVersion 3.4.0 of the sat python package and CLI It also added the following new component:\nVersion 1.4.2 of the sat-podman wrapper script The following sections detail the changes in this release.\nSAT as an Independent Product SAT is now packaged and released as an independent product. The product deliverable is called a \u0026ldquo;release distribution\u0026rdquo;. The release distribution is a gzipped tar file containing an install script. This install script loads the cray/cray-sat container image into the Docker registry in Nexus and loads the cray-sat-podman RPM into a package repository in Nexus.\nIn this release, the cray-sat-podman package is still installed in the master and worker NCN images provided by CSM. This is changed in SAT 2.1.16 released in Shasta v1.5.\nSAT Running in a Container Under Podman The sat command now runs in a container under Podman. The sat executable is now installed on all nodes in the Kubernetes cluster (workers and control plane nodes). This executable is a wrapper script that starts a SAT container in Podman and invokes the sat Python CLI within that container. The admin can run individual sat commands directly on the master or worker NCNs as before, or they can run sat commands inside the SAT container after using sat bash to enter an interactive shell inside the SAT container.\nTo view man pages for sat commands, the user can run sat-man SAT_COMMAND, replacing SAT_COMMAND with the name of the sat command. Alternatively, the user can enter the sat container with sat bash and use the man command.\nNew sat init Command and Configuration File Location Change The default location of the SAT configuration file has been changed from /etc/sat.toml to ~/.config/sat/sat.toml. A new command, sat init, has been added that initializes a configuration file in the new default directory. This better supports individual users on the system who want their own configuration files.\n~/.config/sat is mounted into the container that runs under Podman, so changes are persistent across invocations of the sat container. If desired, an alternate configuration directory can be specified with the SAT_CONFIG_DIR environment variable.\nAdditionally, if a configuration file does not yet exist when a user runs a sat command, one is generated automatically.\nAdditional Types Added to sat hwinv Additional functionality has been added to sat hwinv including:\nList node enclosure power supplies with the --list-node-enclosure-power-supplies option. List node accelerators (for example, GPUs) with the --list-node-accels option. The count of node accelerators is also included for each node. List node accelerator risers (for example, Redstone modules) with the --list-node-accel-risers option. The count of node accelerator risers is also included for each node. List High-Speed Node Network Interface Cards (HSN NICs) with the --list-node-hsn-nics option. The count of HSN NICs is also included for each node. Documentation for these new options has been added to the man page for sat hwinv.\nSite Information Stored by sat setrev in S3 The sat setrev and sat showrev commands now use S3 to store and obtain site information, including system name, site name, serial number, install date, and system type. Since the information is stored in S3, it will now be consistent regardless of the node on which sat is executed.\nAs a result of this change, S3 credentials must be configured for SAT. For more information, see Generate SAT S3 Credentials.\nProduct Version Information Shown by sat showrev sat showrev now shows product information from the cray-product-catalog ConfigMap in Kubernetes.\nAdditional Changes to sat showrev The output from sat showrev has also been changed in the following ways:\nThe --docker and --packages options were considered misleading and have been removed. Information pertaining to only to the local host, where the command is run, has been moved to the output of the --local option. Removal of sat cablecheck The sat cablecheck command has been removed. To verify that the system\u0026rsquo;s Slingshot network is cabled correctly, admins should now use the show cables command in the Slingshot Topology Tool (STT).\nsat swap Command Compatibility with Next-gen Fabric Controller The sat swap command was added in Shasta v1.3.2. This command used the Fabric Controller API. Shasta v1.4 introduced a new Fabric Manager API and removed the Fabric Controller API, so this command has been rewritten to use the new backwards-incompatible API. Usage of the command did not change.\nsat bootsys Functionality Much of the functionality added to sat bootsys in Shasta v1.3.2 was broken by changes introduced in Shasta v1.4, which removed the Ansible inventory and playbooks.\nThe functionality in the platform-services stage of sat bootsys has been re-implemented to use python directly instead of Ansible. This resulted in a more robust procedure with better logging to the sat log file. Failures to stop containers on Kubernetes nodes are handled more gracefully, and more information about the containers that failed to stop, including how to debug the problem, is included.\nImprovements were made to console logging setup for non-compute nodes (NCNs) when they are shut down and booted.\nThe following improvements were made to the bos-operations stage of sat bootsys:\nMore information about the BOS sessions, BOA jobs, and BOA pods is printed. A command-line option, --bos-templates, and a corresponding configuration file option, bos_templates, were added, and the --cle-bos-template and --uan-bos-template options and their corresponding configuration file options were deprecated. The following functionality has been removed from sat bootsys:\nThe hsn-bringup stage of sat bootsys boot has been removed due to removal of the underlying Ansible playbook. The bgp-check stage of sat bootys {boot,shutdown} has been removed. It is now a manual procedure. Log File Location Change The location of the sat log file has changed from /var/log/cray/sat.log to /var/log/cray/sat/sat.log. This change simplifies mounting this file into the sat container running under Podman.\n"
},
{
	"uri": "/docs-sat/en-26/release_notes/shasta_1.5_release_notes/",
	"title": "SAT Changes in Shasta v1.5",
	"tags": [],
	"description": "",
	"content": "SAT Changes in Shasta v1.5 We released version 2.1.16 of the SAT product in Shasta v1.5.\nThis version of the SAT product included:\nVersion 3.7.4 of the sat python package and CLI Version 1.4.10 of the sat-podman wrapper script It also added the following new component:\nVersion 1.0.3 of the sat-cfs-install docker image and helm chart The following sections detail the changes in this release.\nInstall Changes to Separate Product from CSM This release further decouples the installation of the SAT product from the CSM product. The cray-sat-podman RPM is no longer installed in the management non-compute node (NCN) image. Instead, the cray-sat-podman RPM is installed on all master management NCNs via an Ansible playbook which is referenced by a layer of the CFS configuration that applies to management NCNs. This CFS configuration is typically named ncn-personalization.\nThe SAT product now includes a Docker image and a Helm chart named sat-cfs-install. The SAT install script, install.sh, deploys the Helm chart with Loftsman. This helm chart deploys a Kubernetes job that imports the SAT Ansible content to a git repository in VCS (Gitea) named sat-config-management. This repository is referenced by the layer added to the NCN personalization CFS configuration.\nRemoval of Direct Redfish Access All commands which used to access Redfish directly have either been removed or modified to use higher-level service APIs. This includes the following commands:\nsat sensors sat diag sat linkhealth The sat sensors command has been rewritten to use the SMA telemetry API to obtain the latest sensor values. The command\u0026rsquo;s usage has changed slightly, but legacy options work as before, so it is backwards compatible. Additionally, new commands have been added.\nThe sat diag command has been rewritten to use a new service called Fox, which is delivered with the CSM-Diags product. The sat diag command now launches diagnostics using the Fox service, which launches the corresponding diagnostic programs on controllers using the Hardware Management Job and Task Daemon (HMJTD) over Redfish. Essentially, Fox serves as a proxy for us to start diagnostics over Redfish.\nThe sat linkhealth command has been removed. Its functionality has been replaced by functionality from the Slingshot Topology Tool (STT) in the fabric manager pod.\nThe Redfish username and password command line options and configuration file options have been removed. For more information, see Remove Obsolete Configuration File Sections.\nAdditional Fields in sat setrev and sat showrev sat setrev now collects the following information from the admin, which is then displayed by sat showrev:\nSystem description Product number Company name Country code Additional guidance and validation has been added to each field collected by sat setrev. This sets the stage for sdu setup to stop collecting this information and instead collect it from sat showrev or its S3 bucket.\nImprovements to sat bootsys The platform-services stage of the sat bootsys boot command has been improved to start inactive Ceph services, unfreeze Ceph, and wait for Ceph health in the correct order. The ceph-check stage has been removed as it is no longer needed.\nThe platform-services stage of sat bootsys boot now prompts for confirmation of the storage NCN hostnames in addition to the Kubernetes control plane and worker nodes.\nBug Fixes and Security Fixes Improved error handling in sat firmware. Incremented version of Alpine Linux to 3.13.2 to address a security vulnerability. Other Notable Changes Ansible has been removed from the cray-sat container image. Support for the Firmware Update Service (FUS) has been removed from the sat firmware command. "
},
{
	"uri": "/docs-sat/en-26/uninstall_and_downgrade/",
	"title": "SAT Uninstall and Downgrade",
	"tags": [],
	"description": "",
	"content": "SAT Uninstall and Downgrade Uninstall: Remove a Version of SAT This procedure can be used to uninstall a version of SAT.\nPrerequisites Only versions 2.2 or newer of SAT can be uninstalled with prodmgr. CSM version 1.2 or newer must be installed, so that the prodmgr command is available. Procedure (ncn-m001#) Use sat showrev to list versions of SAT.\nsat showrev --products --filter product_name=sat Example output:\n############################################################################### Product Revision Information ############################################################################### +--------------+-----------------+-------------------+-----------------------+ | product_name | product_version | images | image_recipes | +--------------+-----------------+-------------------+-----------------------+ | sat | 2.3.3 | - | - | | sat | 2.2.10 | - | - | +--------------+-----------------+-------------------+-----------------------+ (ncn-m001#) Use prodmgr to uninstall a version of SAT.\nThis command will do three things:\nRemove all hosted-type package repositories associated with the given version of SAT. Group-type repositories are not removed. Remove all container images associated with the given version of SAT. Remove SAT from the cray-product-catalog Kubernetes ConfigMap, so that it will no longer show up in the output of sat showrev. prodmgr uninstall sat 2.2.10 Example output:\nRepository sat-2.2.10-sle-15sp2 has been removed. Removed Docker image cray/cray-sat:3.9.0 Removed Docker image cray/sat-cfs-install:1.0.2 Removed Docker image cray/sat-install-utility:1.4.0 Deleted sat-2.2.10 from product catalog. Downgrade: Switch Between SAT Versions This procedure can be used to downgrade the active version of SAT.\nNote: The prodmgr activate command is deprecated in SAT 2.6, and the ability to switch between SAT versions will be removed in a future release.\nPrerequisites Only versions 2.2 or newer of SAT can be switched. Older versions must be switched manually. CSM version 1.2 or newer must be installed, so that the prodmgr command is available. Procedure (ncn-m001#) Use sat showrev to list versions of SAT.\nsat showrev --products --filter product_name=sat Example output:\n############################################################################### Product Revision Information ############################################################################### +--------------+-----------------+--------------------+-----------------------+ | product_name | product_version | images | image_recipes | +--------------+-----------------+--------------------+-----------------------+ | sat | 2.3.3 | - | - | | sat | 2.2.10 | - | - | +--------------+-----------------+--------------------+-----------------------+ (ncn-m001#) Use prodmgr to switch to a different version of SAT.\nThis command will do two things:\nFor all hosted-type package repositories associated with this version of SAT, set them as the sole member of their corresponding group-type repository. For example, switching to SAT version 2.2.10 sets the repository sat-2.2.10-sle-15sp2 as the only member of the sat-sle-15sp2 group. Ensure that the SAT CFS configuration content exists as a layer in all CFS configurations that are associated with NCNs with the role \u0026ldquo;Management\u0026rdquo; and subrole \u0026ldquo;Master\u0026rdquo; (for example, the CFS configuration management-23.5.0). Specifically, it will ensure that the layer refers to the version of SAT CFS configuration content associated with the version of SAT to which the system is switching. prodmgr activate sat 2.5.15 Example output:\nRepository sat-2.5.15-sle-15sp4 is now the default in sat-sle-15sp4. Updated CFS configurations: [management-23.5.0] Apply the modified CFS configuration to the management NCNs.\nAt this point, Nexus package repositories have been modified to set a particular package repository as active, but the SAT package may not have been updated on management NCNs.\nTo ensure that management NCNs have been updated to use the active SAT version, follow the Procedure to Apply CFS Configuration.\nProcedure to Apply CFS Configuration (ncn-m001#) Set an environment variable that refers to the name of the CFS configuration to be applied to the management NCNs.\nexport CFS_CONFIG_NAME=\u0026#34;management-23.5.0\u0026#34; Note: Refer to the output from the prodmgr activate command to find the name of the modified CFS configuration. If more than one CFS configuration was modified, use the first one.\nINFO: Successfully saved CFS configuration \u0026#34;management-23.5.0\u0026#34; (ncn-m001#) Obtain the name of the CFS configuration layer for SAT and save it in an environment variable:\nexport SAT_LAYER_NAME=$(cray cfs configurations describe $CFS_CONFIG_NAME --format json \\ | jq -r \u0026#39;.layers | map(select(.cloneUrl | contains(\u0026#34;sat-config-management.git\u0026#34;)))[0].name\u0026#39;) (ncn-m001#) Create a CFS session that executes only the SAT layer of the given CFS configuration.\nThe --configuration-limit option limits the configuration session to run only the SAT layer of the configuration.\ncray cfs sessions create --name \u0026#34;sat-session-${CFS_CONFIG_NAME}\u0026#34; --configuration-name \\ \u0026#34;${CFS_CONFIG_NAME}\u0026#34; --configuration-limit \u0026#34;${SAT_LAYER_NAME}\u0026#34; Monitor the progress of the CFS session.\n(ncn-m001#) Set an environment variable to name of the Ansible container within the pod for the CFS session:\nexport ANSIBLE_CONTAINER=$(kubectl get pod -n services \\ --selector=cfsession=sat-session-${CFS_CONFIG_NAME} -o json \\ -o json | jq -r \u0026#39;.items[0].spec.containers | map(select(.name | contains(\u0026#34;ansible\u0026#34;))) | .[0].name\u0026#39;) (ncn-m001#) Next, get the logs for the Ansible container.\nkubectl logs -c $ANSIBLE_CONTAINER --tail 100 -f -n services \\ --selector=cfsession=sat-session-${CFS_CONFIG_NAME} Ansible plays, which are run by the CFS session, will install SAT on all the master management NCNs on the system. A summary of results can be found at the end of the log output.\n(ncn-m001#) The following example shows a successful session:\n... PLAY RECAP ********************************************************************* x3000c0s1b0n0 : ok=3 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 x3000c0s3b0n0 : ok=3 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 x3000c0s5b0n0 : ok=3 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 Note: Ensure that the PLAY RECAPs for each session show successes for all manager NCNs before proceeding.\n(ncn-m001#) Verify that SAT was successfully configured.\nIf sat is configured, the --version command will indicate which version is installed. If sat is not properly configured, the command will fail.\nNote: This version number will differ from the version number of the SAT release distribution. This is the semantic version of the sat Python package, which is different from the version number of the overall SAT release distribution.\nsat --version Example output:\nsat 3.7.0 Note: Upon first running sat, there might be additional output while the sat container image is downloaded. This occurs the first time sat is run on each manager NCN. For example, when running sat for the first time on ncn-m001 and then for the first time on ncn-m002, this additional output is seen both times.\nTrying to pull registry.local/cray/cray-sat:3.7.0-20210514024359_9fed037... Getting image source signatures Copying blob da64e8df3afc done Copying blob 0f36fd81d583 done Copying blob 12527cf455ba done ... sat 3.7.0 (ncn-m001#) Stop the typescript.\nexit SAT version x.y.z is now installed and configured:\nThe SAT RPM package is installed on the associated NCNs. Note on Procedure to Apply CFS Configuration The previous procedure is not always necessary because the CFS Batcher service automatically detects configuration changes and will automatically create new sessions to apply configuration changes according to certain rules. For more information on these rules, refer to Configuration Management with the CFS Batcher in the Cray System Management Documentation.\nThe main scenario in which the CFS batcher will not automatically re-apply the SAT layer is when the commit hash of the sat-config-management git repository has not changed between SAT versions. The previous procedure ensures the configuration is re-applied in all cases, and it is harmless if the batcher has already applied an updated configuration.\n"
},
{
	"uri": "/docs-sat/en-26/upgrade/",
	"title": "SAT Upgrade",
	"tags": [],
	"description": "",
	"content": "SAT Upgrade Install and Upgrade Framework The Install and Upgrade Framework (IUF) provides commands which install, upgrade, and deploy products on systems managed by CSM. IUF capabilities are described in detail in the IUF section of the Cray System Management Documentation. The initial install and upgrade workflows described in the HPE Cray EX System Software Stack Installation and Upgrade Guide for CSM (S-8052) detail when and how to use IUF with a new release of SAT or any other HPE Cray EX product.\nThis document does not replicate install, upgrade, or deployment procedures detailed in the Cray System Management Documentation. This document provides details regarding software and configuration content specific to SAT which is needed when installing, upgrading, or deploying a SAT release. The Cray System Management Documentation will indicate when sections of this document should be referred to for detailed information.\nIUF will perform the following tasks for a release of SAT.\nIUF deliver-product stage: Uploads SAT configuration content to VCS Uploads SAT information to the CSM product catalog Uploads SAT content to Nexus repositories IUF update-vcs-config stage: Updates the VCS integration branch with new SAT configuration content if a working branch is specified IUF update-cfs-config stage: Creates a new CFS configuration for management nodes with new SAT configuration content IUF prepare-images stage: Creates updated management NCN and managed node images with new SAT content IUF management-nodes-rollout stage: Boots management NCNs with an image containing new SAT content IUF uses a variety of CSM and SAT tools when performing these tasks. The IUF section of the Cray System Management Documentation describes how to use these tools directly if it is desirable to use them instead of IUF.\nIUF Stage Details for SAT This section describes SAT details that an administrator must be aware of before running IUF stages. Entries are prefixed with Information if no administrative action is required or Action if an administrator needs to perform tasks outside of IUF.\nupdate-vcs-config Information: This stage is only run if a VCS working branch is specified for SAT. By default, SAT does not create or specify a VCS working branch.\nupdate-cfs-config Information: This stage only applies to the management configuration and not to the managed configuration.\nprepare-images Information: This stage only applies to management images and not to managed images.\nPost-Upgrade Procedures After upgrading SAT with IUF, it is recommended to complete the following procedures before using SAT:\nRemove Obsolete Configuration File Sections Update SAT Logging Set System Revision Information Notes on the Procedures Ellipses (...) in shell output indicate omitted lines. In the examples below, replace x.y.z with the version of the SAT product stream being upgraded. \u0026lsquo;manager\u0026rsquo; and \u0026lsquo;master\u0026rsquo; are used interchangeably in the steps below. Remove Obsolete Configuration File Sections After upgrading SAT, if using the configuration file from a previous version, there may be configuration file sections no longer used in the new version. For example, when upgrading from Shasta 1.4 to Shasta 1.5, the [redfish] configuration file section is no longer used.\n(ncn-m001#) In that case, the following warning may appear upon running sat commands.\nWARNING: Ignoring unknown section \u0026#39;redfish\u0026#39; in config file. Remove the [redfish] section from /root/.config/sat/sat.toml to resolve the warning.\n[redfish] username = \u0026#34;admin\u0026#34; password = \u0026#34;adminpass\u0026#34; Repeat this process for any configuration file sections for which there are \u0026ldquo;unknown section\u0026rdquo; warnings.\nUpdate SAT Logging As of SAT version 2.2, some command output that was previously printed to stdout is now logged to stderr. These messages are logged at the INFO level. The default logging threshold was changed from WARNING to INFO to accommodate this logging change. Additionally, some messages previously logged at the INFO are now logged at the DEBUG level.\nThese changes take effect automatically. However, if the default output threshold has been manually set in ~/.config/sat/sat.toml, it should be changed to ensure that important output is shown in the terminal.\nUpdate Configuration (ncn-m001#) In the following example, the stderr log level, logging.stderr_level, is set to WARNING, which will exclude INFO-level logging from terminal output.\ngrep -A 3 logging ~/.config/sat/sat.toml Example output:\n[logging] ... stderr_level = \u0026#34;WARNING\u0026#34; To enable the new default behavior, comment this line out, delete it, or set the value to \u0026ldquo;INFO\u0026rdquo;.\nIf logging.stderr_level is commented out, its value will not affect logging behavior. However, it may be helpful to set its value to INFO as a reminder of the new default behavior.\nAffected Commands The following commands trigger messages that have been changed from stdout print calls to INFO-level (or WARNING- or ERROR-level) log messages:\nsat bootsys --stage shutdown --stage session-checks sat sensors The following commands trigger messages that have been changed from INFO-level log messages to DEBUG-level log messages:\nsat nid2xname sat xname2nid sat swap Set System Revision Information HPE service representatives use system revision information data to identify systems in support cases.\nPrerequisites SAT authentication has been set up during installation. See Authenticate SAT Commands. S3 credentials have been generated during installation. See Generate SAT S3 Credentials. Notes on the Procedure This procedure is not required if SAT was upgraded from 2.1 (Shasta v1.5) or later. It is required if SAT was upgraded from 2.0 (Shasta v1.4) or earlier.\nProcedure Set System Revision Information.\n(ncn-m001#) Run sat setrev and follow the prompts to set the following site-specific values:\nSerial number System name System type System description Product number Company name Site name Country code System install date Tip: For \u0026ldquo;System type\u0026rdquo;, a system with any liquid-cooled components should be considered a liquid-cooled system. In other words, \u0026ldquo;System type\u0026rdquo; is EX-1C.\nsat setrev Example output:\n-------------------------------------------------------------------------------- Setting: Serial number Purpose: System identification. This will affect how snapshots are identified in the HPE backend services. Description: This is the top-level serial number which uniquely identifies the system. It can be requested from an HPE representative. Valid values: Alpha-numeric string, 4 - 20 characters. Type: \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; Default: None Current value: None -------------------------------------------------------------------------------- Please do one of the following to set the value of the above setting: - Input a new value - Press CTRL-C to exit ... Verify System Revision Information.\n(ncn-m001#) Run sat showrev and verify the output shown in the \u0026ldquo;System Revision Information table.\u0026rdquo;\nThe following example shows sample table output.\nsat showrev Example output:\n################################################################################ System Revision Information ################################################################################ +---------------------+---------------+ | component | data | +---------------------+---------------+ | Company name | HPE | | Country code | US | | Interconnect | Sling | | Product number | R4K98A | | Serial number | 12345 | | Site name | HPE | | Slurm version | slurm 20.02.5 | | System description | Test System | | System install date | 2021-01-29 | | System name | eniac | | System type | EX-1C | +---------------------+---------------+ ################################################################################ Product Revision Information ################################################################################ +--------------+-----------------+------------------------------+------------------------------+ | product_name | product_version | images | image_recipes | +--------------+-----------------+------------------------------+------------------------------+ | csm | 0.8.14 | cray-shasta-csm-sles15sp1... | cray-shasta-csm-sles15sp1... | | sat | 2.0.1 | - | - | | sdu | 1.0.8 | - | - | | slingshot | 0.8.0 | - | - | | sma | 1.4.12 | - | - | +--------------+-----------------+------------------------------+------------------------------+ ################################################################################ Local Host Operating System ################################################################################ +-----------+----------------------+ | component | version | +-----------+----------------------+ | Kernel | 5.3.18-24.15-default | | SLES | SLES 15-SP2 | +-----------+----------------------+ "
},
{
	"uri": "/docs-sat/en-26/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs-sat/en-26/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]